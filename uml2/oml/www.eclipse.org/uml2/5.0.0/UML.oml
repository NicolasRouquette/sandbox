vocabulary <http://www.eclipse.org/uml2/5.0.0/UML#> as uml {

	extends <http://www.w3.org/2000/01/rdf-schema#> as rdfs

	extends <http://www.eclipse.org/uml2/5.0.0/Types#> as types

	@rdfs:label "ActivityContent"
	aspect ActivityContent

	@rdfs:label "Activity"
	@rdfs:comment "An Activity is the specification of parameterized Behavior as the coordinated sequencing of subordinate units."
	concept Activity < Behavior [
		restricts Activity_isReadOnly to exactly 1
		restricts Activity_isSingleExecution to exactly 1
	]

	@rdfs:label "ownedGroup"
	relation Activity_ownedGroup [
		from Activity
		to ActivityGroup
	] < Activity_group

	@rdfs:label "edge"
	@rdfs:comment "ActivityEdges expressing flow between the nodes of the Activity."
	relation Activity_edge [
		from Activity
		to ActivityEdge
		@rdfs:label "activity"
		@rdfs:comment "The Activity containing the ActivityEdge, if it is directly owned by an Activity."
		reverse ActivityEdge_activity
	] < Element_ownedElement

	@rdfs:label "node"
	@rdfs:comment "ActivityNodes coordinated by the Activity."
	relation Activity_node [
		from Activity
		to ActivityNode
		@rdfs:label "activity"
		@rdfs:comment "The Activity containing the ActivityNode, if it is directly owned by an Activity."
		reverse ActivityNode_activity
	] < Element_ownedElement

	@rdfs:label "variable"
	@rdfs:comment "Top-level Variables defined by the Activity."
	relation Activity_variable [
		from Activity
		to Variable
		@rdfs:label "activityScope"
		@rdfs:comment "An Activity that owns the Variable."
		reverse Variable_activityScope
	] < Namespace_ownedMember

	@rdfs:label "group"
	@rdfs:comment "Top-level ActivityGroups in the Activity."
	relation Activity_group [
		from Activity
		to ActivityGroup
		@rdfs:label "inActivity"
		@rdfs:comment "The Activity containing the ActivityGroup, if it is directly owned by an Activity."
		reverse ActivityGroup_inActivity
	] < Element_ownedElement

	@rdfs:label "ownedNode"
	relation Activity_ownedNode [
		from Activity
		to ActivityNode
	] < Activity_node

	@rdfs:label "isReadOnly"
	@rdfs:comment "If true, this Activity must not make any changes to objects. The default is false (an Activity may make nonlocal changes). (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the Activity, then the model is ill-formed.)"
	scalar property Activity_isReadOnly [
		domain Activity
		range types:Boolean
		functional
	]

	@rdfs:label "isSingleExecution"
	@rdfs:comment "If true, all invocations of the Activity are handled by the same execution."
	scalar property Activity_isSingleExecution [
		domain Activity
		range types:Boolean
		functional
	]

	@rdfs:label "partition"
	@rdfs:comment "Top-level ActivityPartitions in the Activity."
	relation Activity_partition [
		from Activity
		to ActivityPartition
	] < Activity_ownedGroup

	@rdfs:label "structuredNode"
	@rdfs:comment "Top-level StructuredActivityNodes in the Activity."
	relation Activity_structuredNode [
		from Activity
		to StructuredActivityNode
	] < Activity_group, Activity_node

	@rdfs:label "Behavior"
	@rdfs:comment "Behavior is a specification of how its context BehavioredClassifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution."
	concept Behavior < Class

	@rdfs:label "method"
	@rdfs:comment "A Behavior that implements the BehavioralFeature. There may be at most one Behavior for a particular pairing of a Classifier (as owner of the Behavior) and a BehavioralFeature (as specification of the Behavior)."
	relation BehavioralFeature_method [
		from BehavioralFeature
		to Behavior
		@rdfs:label "specification"
		@rdfs:comment "Designates a BehavioralFeature that the Behavior implements. The BehavioralFeature must be owned by the BehavioredClassifier that owns the Behavior or be inherited by it. The Parameters of the BehavioralFeature and the implementing Behavior must match. A Behavior does not need to have a specification, in which case it either is the classifierBehavior of a BehavioredClassifier or it can only be invoked by another Behavior of the Classifier."
		reverse Behavior_specification
	]

	@rdfs:label "context"
	@rdfs:comment "The BehavioredClassifier that is the context for the execution of the Behavior. A Behavior that is directly owned as a nestedClassifier does not have a context. Otherwise, to determine the context of a Behavior, find the first BehavioredClassifier reached by following the chain of owner relationships from the Behavior, if any. If there is such a BehavioredClassifier, then it is the context, unless it is itself a Behavior with a non-empty context, in which case that is also the context for the original Behavior. For example, following this algorithm, the context of an entry Behavior in a StateMachine is the BehavioredClassifier that owns the StateMachine. The features of the context BehavioredClassifier as well as the Elements visible to the context Classifier are visible to the Behavior."
	relation Behavior_context [
		from Behavior
		to BehavioredClassifier
	] < RedefinableElement_redefinitionContext

	@rdfs:label "isReentrant"
	@rdfs:comment "Tells whether the Behavior can be invoked while it is still executing from a previous invocation."
	scalar property Behavior_isReentrant [
		domain Behavior
		range types:Boolean
		functional
	]

	@rdfs:label "ownedParameter"
	@rdfs:comment "References a list of Parameters to the Behavior which describes the order and type of arguments that can be given when the Behavior is invoked and of the values which will be returned when the Behavior completes its execution."
	relation Behavior_ownedParameter [
		from Behavior
		to Parameter
	] < Namespace_ownedMember

	@rdfs:label "ownedParameterSet"
	@rdfs:comment "The ParameterSets owned by this Behavior."
	relation Behavior_ownedParameterSet [
		from Behavior
		to ParameterSet
	] < Namespace_ownedMember

	@rdfs:label "postcondition"
	@rdfs:comment "An optional set of Constraints specifying what is fulfilled after the execution of the Behavior is completed, if its precondition was fulfilled before its invocation."
	relation Behavior_postcondition [
		from Behavior
		to Constraint
	] < Namespace_ownedRule

	@rdfs:label "precondition"
	@rdfs:comment "An optional set of Constraints specifying what must be fulfilled before the Behavior is invoked."
	relation Behavior_precondition [
		from Behavior
		to Constraint
	] < Namespace_ownedRule

	@rdfs:label "redefinedBehavior"
	@rdfs:comment "References the Behavior that this Behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the Behavior implements a BehavioralFeature, it replaces the redefined Behavior. If the Behavior is a classifierBehavior, it extends the redefined Behavior."
	relation Behavior_redefinedBehavior [
		from Behavior
		to Behavior
	] < Classifier_redefinedClassifier

	@rdfs:label "Class"
	@rdfs:comment "A Class classifies a set of objects and specifies the features that characterize the structure and behavior of those objects.  A Class may have an internal structure and Ports."
	concept Class < EncapsulatedClassifier, BehavioredClassifier [
		restricts Class_isActive to exactly 1
	]

	@rdfs:label "ownedOperation"
	@rdfs:comment "The Operations owned by the Class."
	relation Class_ownedOperation [
		from Class
		to Operation
		@rdfs:label "class"
		@rdfs:comment "The Class that owns this operation, if any."
		reverse Operation_class
	] < Classifier_feature, Namespace_ownedMember

	@rdfs:label "extension"
	@rdfs:comment "This property is used when the Class is acting as a metaclass. It references the Extensions that specify additional properties of the metaclass. The property is derived from the Extensions whose memberEnds are typed by the Class."
	relation Class_extension [
		from Class
		to Extension
		@rdfs:label "metaclass"
		@rdfs:comment "References the Class that is extended through an Extension. The property is derived from the type of the memberEnd that is not the ownedEnd."
		reverse Extension_metaclass
		inverse functional
	]

	@rdfs:label "isActive"
	@rdfs:comment "Determines whether an object specified by this Class is active or not. If true, then the owning Class is referred to as an active Class. If false, then such a Class is referred to as a passive Class."
	scalar property Class_isActive [
		domain Class
		range types:Boolean
		functional
	]

	@rdfs:label "nestedClassifier"
	@rdfs:comment "The Classifiers owned by the Class that are not ownedBehaviors."
	relation Class_nestedClassifier [
		from Class
		to Classifier
	] < Namespace_ownedMember

	@rdfs:label "ownedReception"
	@rdfs:comment "The Receptions owned by the Class."
	relation Class_ownedReception [
		from Class
		to Reception
	] < Classifier_feature, Namespace_ownedMember

	@rdfs:label "superClass"
	@rdfs:comment "The superclasses of a Class, derived from its Generalizations."
	relation Class_superClass [
		from Class
		to Class
	] < Classifier_general

	@rdfs:label "BehavioredClassifier"
	@rdfs:comment "A BehavioredClassifier may have InterfaceRealizations, and owns a set of Behaviors one of which may specify the behavior of the BehavioredClassifier itself."
	aspect BehavioredClassifier < Classifier

	@rdfs:label "classifierBehavior"
	@rdfs:comment "A Behavior that specifies the behavior of the BehavioredClassifier itself."
	relation BehavioredClassifier_classifierBehavior [
		from BehavioredClassifier
		to Behavior
		functional
	] < BehavioredClassifier_ownedBehavior

	@rdfs:label "interfaceRealization"
	@rdfs:comment "The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation."
	relation BehavioredClassifier_interfaceRealization [
		from BehavioredClassifier
		to InterfaceRealization
		@rdfs:label "implementingClassifier"
		@rdfs:comment "References the BehavioredClassifier that owns this InterfaceRealization, i.e., the BehavioredClassifier that realizes the Interface to which it refers."
		reverse InterfaceRealization_implementingClassifier
		inverse functional
	] < Element_ownedElement, NamedElement_clientDependency

	@rdfs:label "ownedBehavior"
	@rdfs:comment "Behaviors owned by a BehavioredClassifier."
	relation BehavioredClassifier_ownedBehavior [
		from BehavioredClassifier
		to Behavior
	] < Namespace_ownedMember

	@rdfs:label "Classifier"
	@rdfs:comment "A Classifier represents a classification of instances according to their Features."
	aspect Classifier < Namespace, RedefinableElement, Type, TemplateableElement [
		restricts Classifier_isAbstract to exactly 1
		restricts Classifier_isFinalSpecialization to exactly 1
	]

	@rdfs:label "feature"
	@rdfs:comment "Specifies each Feature directly defined in the classifier. Note that there may be members of the Classifier that are of the type Feature but are not included, e.g., inherited features."
	relation Classifier_feature [
		from Classifier
		to Feature
		@rdfs:label "featuringClassifier"
		@rdfs:comment "The Classifiers that have this Feature as a feature."
		reverse Feature_featuringClassifier
	] < Namespace_member

	@rdfs:label "attribute"
	@rdfs:comment "All of the Properties that are direct (i.e., not inherited or imported) attributes of the Classifier."
	relation Classifier_attribute [
		from Classifier
		to Property
	] < Classifier_feature

	@rdfs:label "collaborationUse"
	@rdfs:comment "The CollaborationUses owned by the Classifier."
	relation Classifier_collaborationUse [
		from Classifier
		to CollaborationUse
	] < Element_ownedElement

	@rdfs:label "general"
	@rdfs:comment "The generalizing Classifiers for this Classifier."
	relation Classifier_general [
		from Classifier
		to Classifier
	]

	@rdfs:label "generalization"
	@rdfs:comment "The Generalization relationships for this Classifier. These Generalizations navigate to more general Classifiers in the generalization hierarchy."
	relation Classifier_generalization [
		from Classifier
		to Generalization
		@rdfs:label "specific"
		@rdfs:comment "The specializing Classifier in the Generalization relationship."
		reverse Generalization_specific
		inverse functional
	] < Element_ownedElement

	@rdfs:label "powertypeExtent"
	@rdfs:comment "The GeneralizationSet of which this Classifier is a power type."
	relation Classifier_powertypeExtent [
		from Classifier
		to GeneralizationSet
		@rdfs:label "powertype"
		@rdfs:comment "Designates the Classifier that is defined as the power type for the associated GeneralizationSet, if there is one."
		reverse GeneralizationSet_powertype
	]

	@rdfs:label "inheritedMember"
	@rdfs:comment "All elements inherited by this Classifier from its general Classifiers."
	relation Classifier_inheritedMember [
		from Classifier
		to NamedElement
	] < Namespace_member

	@rdfs:label "isAbstract"
	@rdfs:comment "If true, the Classifier can only be instantiated by instantiating one of its specializations. An abstract Classifier is intended to be used by other Classifiers e.g., as the target of Associations or Generalizations."
	scalar property Classifier_isAbstract [
		domain Classifier
		range types:Boolean
		functional
	]

	@rdfs:label "isFinalSpecialization"
	@rdfs:comment "If true, the Classifier cannot be specialized."
	scalar property Classifier_isFinalSpecialization [
		domain Classifier
		range types:Boolean
		functional
	]

	@rdfs:label "ownedUseCase"
	@rdfs:comment "The UseCases owned by this classifier."
	relation Classifier_ownedUseCase [
		from Classifier
		to UseCase
	] < Namespace_ownedMember

	@rdfs:label "useCase"
	@rdfs:comment "The set of UseCases for which this Classifier is the subject."
	relation Classifier_useCase [
		from Classifier
		to UseCase
		@rdfs:label "subject"
		@rdfs:comment "The subjects to which this UseCase applies. Each subject or its parts realize all the UseCases that apply to it."
		reverse UseCase_subject
	]

	@rdfs:label "redefinedClassifier"
	@rdfs:comment "The Classifiers redefined by this Classifier."
	relation Classifier_redefinedClassifier [
		from Classifier
		to Classifier
	] < RedefinableElement_redefinedElement

	@rdfs:label "representation"
	@rdfs:comment "A CollaborationUse which indicates the Collaboration that represents this Classifier."
	relation Classifier_representation [
		from Classifier
		to CollaborationUse
		functional
	] < Classifier_collaborationUse

	@rdfs:label "substitution"
	@rdfs:comment "The Substitutions owned by this Classifier."
	relation Classifier_substitution [
		from Classifier
		to Substitution
		@rdfs:label "substitutingClassifier"
		@rdfs:comment "Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected."
		reverse Substitution_substitutingClassifier
		inverse functional
	] < Element_ownedElement, NamedElement_clientDependency

	@rdfs:label "Namespace"
	@rdfs:comment "A Namespace is an Element in a model that owns and/or imports a set of NamedElements that can be identified by name."
	aspect Namespace < NamedElement

	@rdfs:label "ownedRule"
	@rdfs:comment "Specifies a set of Constraints owned by this Namespace."
	relation Namespace_ownedRule [
		from Namespace
		to Constraint
		@rdfs:label "context"
		@rdfs:comment "Specifies the Namespace that owns the Constraint."
		reverse Constraint_context
	] < Namespace_ownedMember

	@rdfs:label "elementImport"
	@rdfs:comment "References the ElementImports owned by the Namespace."
	relation Namespace_elementImport [
		from Namespace
		to ElementImport
		@rdfs:label "importingNamespace"
		@rdfs:comment "Specifies the Namespace that imports a PackageableElement from another Namespace."
		reverse ElementImport_importingNamespace
		inverse functional
	] < Element_ownedElement

	@rdfs:label "packageImport"
	@rdfs:comment "References the PackageImports owned by the Namespace."
	relation Namespace_packageImport [
		from Namespace
		to PackageImport
		@rdfs:label "importingNamespace"
		@rdfs:comment "Specifies the Namespace that imports the members from a Package."
		reverse PackageImport_importingNamespace
		inverse functional
	] < Element_ownedElement

	@rdfs:label "ownedMember"
	@rdfs:comment "A collection of NamedElements owned by the Namespace."
	relation Namespace_ownedMember [
		from Namespace
		to NamedElement
		@rdfs:label "namespace"
		@rdfs:comment "Specifies the Namespace that owns the NamedElement."
		reverse NamedElement_namespace
	] < Element_ownedElement, Namespace_member

	@rdfs:label "importedMember"
	@rdfs:comment "References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports."
	relation Namespace_importedMember [
		from Namespace
		to PackageableElement
	] < Namespace_member

	@rdfs:label "member"
	@rdfs:comment "A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance."
	relation Namespace_member [
		from Namespace
		to NamedElement
	]

	@rdfs:label "NamedElement"
	@rdfs:comment "A NamedElement is an Element in a model that may have a name. The name may be given directly and/or via the use of a StringExpression."
	aspect NamedElement < Element

	@rdfs:label "clientDependency"
	@rdfs:comment "Indicates the Dependencies that reference this NamedElement as a client."
	relation NamedElement_clientDependency [
		from NamedElement
		to Dependency
	]

	@rdfs:label "name"
	@rdfs:comment "The name of the NamedElement."
	scalar property NamedElement_name [
		domain NamedElement
		range types:String
		functional
	]

	@rdfs:label "nameExpression"
	@rdfs:comment "The StringExpression used to define the name of this NamedElement."
	relation NamedElement_nameExpression [
		from NamedElement
		to StringExpression
		functional
	] < Element_ownedElement

	@rdfs:label "qualifiedName"
	@rdfs:comment "A name that allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing Namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself."
	scalar property NamedElement_qualifiedName [
		domain NamedElement
		range types:String
		functional
	]

	@rdfs:label "visibility"
	@rdfs:comment "Determines whether and how the NamedElement is visible outside its owning Namespace."
	scalar property NamedElement_visibility [
		domain NamedElement
		range VisibilityKind
		functional
	]

	@rdfs:label "Element"
	@rdfs:comment "An Element is a constituent of a model. As such, it has the capability of owning other Elements."
	aspect Element

	@rdfs:label "ownedComment"
	@rdfs:comment "The Comments owned by this Element."
	relation Element_ownedComment [
		from Element
		to Comment
	] < Element_ownedElement

	@rdfs:label "ownedElement"
	@rdfs:comment "The Elements owned by this Element."
	relation Element_ownedElement [
		from Element
		to Element
		@rdfs:label "owner"
		@rdfs:comment "The Element that owns this Element."
		reverse Element_owner
	]

	@rdfs:label "Comment"
	@rdfs:comment "A Comment is a textual annotation that can be attached to a set of Elements."
	concept Comment < Element

	@rdfs:label "annotatedElement"
	@rdfs:comment "References the Element(s) being commented."
	relation Comment_annotatedElement [
		from Comment
		to Element
	]

	@rdfs:label "body"
	@rdfs:comment "Specifies a string that is the comment."
	scalar property Comment_body [
		domain Comment
		range types:String
		functional
	]

	@rdfs:label "Stereotype"
	@rdfs:comment "A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass."
	concept Stereotype < Class [
		restricts Stereotype_profile to exactly 1
	]

	@rdfs:label "icon"
	@rdfs:comment "Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements."
	relation Stereotype_icon [
		from Stereotype
		to Image
	] < Element_ownedElement

	@rdfs:label "profile"
	@rdfs:comment "The profile that directly or indirectly contains this stereotype."
	relation Stereotype_profile [
		from Stereotype
		to Profile
		functional
	]

	@rdfs:label "Image"
	@rdfs:comment "Physical definition of a graphical image."
	concept Image < Element

	@rdfs:label "content"
	@rdfs:comment "This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing 'instructions' using a standard such as Scalable Vector Graphic (SVG) (which is XML based)."
	scalar property Image_content [
		domain Image
		range types:String
		functional
	]

	@rdfs:label "format"
	@rdfs:comment '''This indicates the format of the content, which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP. In addition the prefix 'MIME: ' is also reserved. This option can be used as an alternative to express the reserved values above, for example "SVG" could instead be expressed as "MIME: image/svg+xml".'''
	scalar property Image_format [
		domain Image
		range types:String
		functional
	]

	@rdfs:label "location"
	@rdfs:comment "This contains a location that can be used by a tool to locate the image as an alternative to embedding it in the stereotype."
	scalar property Image_location [
		domain Image
		range types:String
		functional
	]

	@rdfs:label "Profile"
	@rdfs:comment "A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain."
	concept Profile < Package

	@rdfs:label "metaclassReference"
	@rdfs:comment "References a metaclass that may be extended."
	relation Profile_metaclassReference [
		from Profile
		to ElementImport
	] < Namespace_elementImport

	@rdfs:label "metamodelReference"
	@rdfs:comment "References a package containing (directly or indirectly) metaclasses that may be extended."
	relation Profile_metamodelReference [
		from Profile
		to PackageImport
	] < Namespace_packageImport

	@rdfs:label "Package"
	@rdfs:comment '''A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.
Package specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.
A package is used to group elements, and provides a namespace for the grouped elements.'''
	concept Package < Namespace, PackageableElement, TemplateableElement

	@rdfs:label "URI"
	@rdfs:comment "Provides an identifier for the package that can be used for many purposes. A URI is the universally unique identification of the package following the IETF URI specification, RFC 2396 http://www.ietf.org/rfc/rfc2396.txt and it must comply with those syntax rules."
	scalar property Package_URI [
		domain Package
		range types:String
		functional
	]

	@rdfs:label "nestedPackage"
	@rdfs:comment "References the packaged elements that are Packages."
	relation Package_nestedPackage [
		from Package
		to Package
		@rdfs:label "nestingPackage"
		@rdfs:comment "References the Package that owns this Package."
		reverse Package_nestingPackage
	] < Package_packagedElement

	@rdfs:label "ownedStereotype"
	@rdfs:comment "References the Stereotypes that are owned by the Package."
	relation Package_ownedStereotype [
		from Package
		to Stereotype
	] < Package_packagedElement

	@rdfs:label "ownedType"
	@rdfs:comment "References the packaged elements that are Types."
	relation Package_ownedType [
		from Package
		to Type
		@rdfs:label "package"
		@rdfs:comment "Specifies the owning Package of this Type, if any."
		reverse Type_package
	] < Package_packagedElement

	@rdfs:label "packageMerge"
	@rdfs:comment "References the PackageMerges that are owned by this Package."
	relation Package_packageMerge [
		from Package
		to PackageMerge
		@rdfs:label "receivingPackage"
		@rdfs:comment "References the Package that is being extended with the contents of the merged package of the PackageMerge."
		reverse PackageMerge_receivingPackage
		inverse functional
	] < Element_ownedElement

	@rdfs:label "packagedElement"
	@rdfs:comment "Specifies the packageable elements that are owned by this Package."
	relation Package_packagedElement [
		from Package
		to PackageableElement
	] < Namespace_ownedMember

	@rdfs:label "profileApplication"
	@rdfs:comment "References the ProfileApplications that indicate which profiles have been applied to the Package."
	relation Package_profileApplication [
		from Package
		to ProfileApplication
		@rdfs:label "applyingPackage"
		@rdfs:comment "The package that owns the profile application."
		reverse ProfileApplication_applyingPackage
		inverse functional
	] < Element_ownedElement

	@rdfs:label "PackageableElement"
	@rdfs:comment "A PackageableElement is a NamedElement that may be owned directly by a Package. A PackageableElement is also able to serve as the parameteredElement of a TemplateParameter."
	aspect PackageableElement < NamedElement, ParameterableElement

	@rdfs:label "ParameterableElement"
	@rdfs:comment "A ParameterableElement is an Element that can be exposed as a formal TemplateParameter for a template, or specified as an actual parameter in a binding of a template."
	aspect ParameterableElement < Element

	@rdfs:label "ownedParameteredElement"
	@rdfs:comment "The ParameterableElement that is owned by this TemplateParameter for the purpose of exposing it as the parameteredElement."
	relation TemplateParameter_ownedParameteredElement [
		from TemplateParameter
		to ParameterableElement
		@rdfs:label "owningTemplateParameter"
		@rdfs:comment "The formal TemplateParameter that owns this ParameterableElement."
		reverse ParameterableElement_owningTemplateParameter
		functional
	] < Element_ownedElement, TemplateParameter_parameteredElement

	@rdfs:label "parameteredElement"
	@rdfs:comment "The ParameterableElement exposed by this TemplateParameter."
	relation TemplateParameter_parameteredElement [
		from TemplateParameter
		to ParameterableElement
		@rdfs:label "templateParameter"
		@rdfs:comment "The TemplateParameter that exposes this ParameterableElement as a formal parameter."
		reverse ParameterableElement_templateParameter
		functional
	]

	@rdfs:label "TemplateParameter"
	@rdfs:comment "A TemplateParameter exposes a ParameterableElement as a formal parameter of a template."
	concept TemplateParameter < Element [
		restricts TemplateParameter_parameteredElement to exactly 1
		restricts TemplateParameter_signature to exactly 1
	]

	@rdfs:label "default"
	@rdfs:comment "The ParameterableElement that is the default for this formal TemplateParameter."
	relation TemplateParameter_default [
		from TemplateParameter
		to ParameterableElement
		functional
	]

	@rdfs:label "ownedDefault"
	@rdfs:comment "The ParameterableElement that is owned by this TemplateParameter for the purpose of providing a default."
	relation TemplateParameter_ownedDefault [
		from TemplateParameter
		to ParameterableElement
		functional
	] < Element_ownedElement, TemplateParameter_default

	@rdfs:label "ownedParameter"
	@rdfs:comment "The formal parameters that are owned by this TemplateSignature."
	relation TemplateSignature_ownedParameter [
		from TemplateSignature
		to TemplateParameter
		@rdfs:label "signature"
		@rdfs:comment "The TemplateSignature that owns this TemplateParameter."
		reverse TemplateParameter_signature
		inverse functional
	] < Element_ownedElement, TemplateSignature_parameter

	@rdfs:label "TemplateSignature"
	@rdfs:comment "A Template Signature bundles the set of formal TemplateParameters for a template."
	concept TemplateSignature < Element [
		restricts TemplateSignature_parameter to min 1
		restricts TemplateSignature_template to exactly 1
	]

	@rdfs:label "parameter"
	@rdfs:comment "The ordered set of all formal TemplateParameters for this TemplateSignature."
	relation TemplateSignature_parameter [
		from TemplateSignature
		to TemplateParameter
	]

	@rdfs:label "ownedTemplateSignature"
	@rdfs:comment "The optional TemplateSignature specifying the formal TemplateParameters for this TemplateableElement. If a TemplateableElement has a TemplateSignature, then it is a template."
	relation TemplateableElement_ownedTemplateSignature [
		from TemplateableElement
		to TemplateSignature
		@rdfs:label "template"
		@rdfs:comment "The TemplateableElement that owns this TemplateSignature."
		reverse TemplateSignature_template
		functional
		inverse functional
	] < Element_ownedElement

	@rdfs:label "TemplateableElement"
	@rdfs:comment "A TemplateableElement is an Element that can optionally be defined as a template and bound to other templates."
	aspect TemplateableElement < Element

	@rdfs:label "templateBinding"
	@rdfs:comment "The optional TemplateBindings from this TemplateableElement to one or more templates."
	relation TemplateableElement_templateBinding [
		from TemplateableElement
		to TemplateBinding
		@rdfs:label "boundElement"
		@rdfs:comment "The TemplateableElement that is bound by this TemplateBinding."
		reverse TemplateBinding_boundElement
		inverse functional
	] < Element_ownedElement

	@rdfs:label "TemplateBinding"
	@rdfs:comment "A TemplateBinding is a DirectedRelationship between a TemplateableElement and a template. A TemplateBinding specifies the TemplateParameterSubstitutions of actual parameters for the formal parameters of the template."
	concept TemplateBinding < DirectedRelationship [
		restricts TemplateBinding_boundElement to exactly 1
	]

	@rdfs:label "parameterSubstitution"
	@rdfs:comment "The TemplateParameterSubstitutions owned by this TemplateBinding."
	relation TemplateBinding_parameterSubstitution [
		from TemplateBinding
		to TemplateParameterSubstitution
		@rdfs:label "templateBinding"
		@rdfs:comment "The TemplateBinding that owns this TemplateParameterSubstitution."
		reverse TemplateParameterSubstitution_templateBinding
		inverse functional
	] < Element_ownedElement

	@rdfs:label "signature"
	@rdfs:comment "The TemplateSignature for the template that is the target of this TemplateBinding."
	relation TemplateBinding_signature [
		from TemplateBinding
		to TemplateSignature
		functional
	] < DirectedRelationship_target

	@rdfs:label "DirectedRelationship"
	@rdfs:comment "A DirectedRelationship represents a relationship between a collection of source model Elements and a collection of target model Elements."
	aspect DirectedRelationship < Relationship

	@rdfs:label "source"
	@rdfs:comment "Specifies the source Element(s) of the DirectedRelationship."
	relation DirectedRelationship_source [
		from DirectedRelationship
		to Element
		functional
	] < Relationship_relatedElement

	@rdfs:label "target"
	@rdfs:comment "Specifies the target Element(s) of the DirectedRelationship."
	relation DirectedRelationship_target [
		from DirectedRelationship
		to Element
		functional
	] < Relationship_relatedElement

	@rdfs:label "Relationship"
	@rdfs:comment "Relationship is an abstract concept that specifies some kind of relationship between Elements."
	aspect Relationship < Element

	@rdfs:label "relatedElement"
	@rdfs:comment "Specifies the elements related by the Relationship."
	relation Relationship_relatedElement [
		from Relationship
		to Element
		functional
	]

	@rdfs:label "TemplateParameterSubstitution"
	@rdfs:comment "A TemplateParameterSubstitution relates the actual parameter to a formal TemplateParameter as part of a template binding."
	concept TemplateParameterSubstitution < Element [
		restricts TemplateParameterSubstitution_templateBinding to exactly 1
		restricts TemplateParameterSubstitution_actual to exactly 1
		restricts TemplateParameterSubstitution_formal to exactly 1
	]

	@rdfs:label "actual"
	@rdfs:comment "The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution."
	relation TemplateParameterSubstitution_actual [
		from TemplateParameterSubstitution
		to ParameterableElement
		functional
	]

	@rdfs:label "formal"
	@rdfs:comment "The formal TemplateParameter that is associated with this TemplateParameterSubstitution."
	relation TemplateParameterSubstitution_formal [
		from TemplateParameterSubstitution
		to TemplateParameter
		functional
	]

	@rdfs:label "ownedActual"
	@rdfs:comment "The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter."
	relation TemplateParameterSubstitution_ownedActual [
		from TemplateParameterSubstitution
		to ParameterableElement
		functional
	] < Element_ownedElement, TemplateParameterSubstitution_actual

	@rdfs:label "VisibilityKind"
	@rdfs:comment "VisibilityKind is an enumeration type that defines literals to determine the visibility of Elements in a model."
	scalar VisibilityKind [
		oneOf "public", "private", "protected", "package"
	]

	@rdfs:label "Type"
	@rdfs:comment "A Type constrains the values represented by a TypedElement."
	aspect Type < PackageableElement

	@rdfs:label "Association"
	@rdfs:comment "A link is a tuple of values that refer to typed objects.  An Association classifies a set of links, each of which is an instance of the Association.  Each value in the link refers to an instance of the type of the corresponding end of the Association."
	concept Association < Classifier, Relationship [
		restricts Association_isDerived to exactly 1
		restricts Association_memberEnd to min 2
	]

	@rdfs:label "endType"
	@rdfs:comment "The Classifiers that are used as types of the ends of the Association."
	relation Association_endType [
		from Association
		to Type
		functional
	] < Relationship_relatedElement

	@rdfs:label "isDerived"
	@rdfs:comment "Specifies whether the Association is derived from other model elements such as other Associations."
	scalar property Association_isDerived [
		domain Association
		range types:Boolean
		functional
	]

	@rdfs:label "memberEnd"
	@rdfs:comment "Each end represents participation of instances of the Classifier connected to the end in links of the Association."
	relation Association_memberEnd [
		from Association
		to Property
		@rdfs:label "association"
		@rdfs:comment "The Association of which this Property is a member, if any."
		reverse Property_association
	] < Namespace_member

	@rdfs:label "ownedEnd"
	@rdfs:comment "The ends that are owned by the Association itself."
	relation Association_ownedEnd [
		from Association
		to Property
		@rdfs:label "owningAssociation"
		@rdfs:comment "The owning association of this property, if any."
		reverse Property_owningAssociation
	] < Association_memberEnd, Classifier_feature, Namespace_ownedMember

	@rdfs:label "navigableOwnedEnd"
	@rdfs:comment "The navigable ends that are owned by the Association itself."
	relation Association_navigableOwnedEnd [
		from Association
		to Property
	] < Association_ownedEnd

	@rdfs:label "Property"
	@rdfs:comment "A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template."
	concept Property < StructuralFeature, ConnectableElement, DeploymentTarget [
		restricts Property_aggregation to exactly 1
		restricts Property_isComposite to exactly 1
		restricts Property_isDerived to exactly 1
		restricts Property_isDerivedUnion to exactly 1
		restricts Property_isID to exactly 1
	]

	@rdfs:label "ownedAttribute"
	@rdfs:comment "The attributes owned by the DataType."
	relation DataType_ownedAttribute [
		from DataType
		to Property
		@rdfs:label "datatype"
		@rdfs:comment "The DataType that owns this Property, if any."
		reverse Property_datatype
	] < Namespace_ownedMember, Classifier_attribute

	@rdfs:label "ownedAttribute"
	@rdfs:comment "The attributes (i.e., the Properties) owned by the Interface."
	relation Interface_ownedAttribute [
		from Interface
		to Property
		@rdfs:label "interface"
		@rdfs:comment "The Interface that owns this Property, if any."
		reverse Property_interface
	] < Namespace_ownedMember, Classifier_attribute

	@rdfs:label "default"
	scalar property Property_default [
		domain Property
		range types:String
		functional
	]

	@rdfs:label "aggregation"
	@rdfs:comment "Specifies the kind of aggregation that applies to the Property."
	scalar property Property_aggregation [
		domain Property
		range AggregationKind
		functional
	]

	@rdfs:label "qualifier"
	@rdfs:comment "An optional list of ordered qualifier attributes for the end."
	relation Property_qualifier [
		from Property
		to Property
		@rdfs:label "associationEnd"
		@rdfs:comment "Designates the optional association end that owns a qualifier attribute."
		reverse Property_associationEnd
	] < Element_ownedElement

	@rdfs:label "class"
	@rdfs:comment "The Class that owns this Property, if any."
	relation Property_class [
		from Property
		to Class
	] < NamedElement_namespace, Feature_featuringClassifier, RedefinableElement_redefinitionContext

	@rdfs:label "defaultValue"
	@rdfs:comment "A ValueSpecification that is evaluated to give a default value for the Property when an instance of the owning Classifier is instantiated."
	relation Property_defaultValue [
		from Property
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "isComposite"
	@rdfs:comment "If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute. This is a derived value, indicating whether the aggregation of the Property is composite or not."
	scalar property Property_isComposite [
		domain Property
		range types:Boolean
		functional
	]

	@rdfs:label "isDerived"
	@rdfs:comment "Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information."
	scalar property Property_isDerived [
		domain Property
		range types:Boolean
		functional
	]

	@rdfs:label "isDerivedUnion"
	@rdfs:comment "Specifies whether the property is derived as the union of all of the Properties that are constrained to subset it."
	scalar property Property_isDerivedUnion [
		domain Property
		range types:Boolean
		functional
	]

	@rdfs:label "isID"
	@rdfs:comment "True indicates this property can be used to uniquely identify an instance of the containing Class."
	scalar property Property_isID [
		domain Property
		range types:Boolean
		functional
	]

	@rdfs:label "opposite"
	@rdfs:comment "In the case where the Property is one end of a binary association this gives the other end."
	relation Property_opposite [
		from Property
		to Property
		functional
	]

	@rdfs:label "redefinedProperty"
	@rdfs:comment "The properties that are redefined by this property, if any."
	relation Property_redefinedProperty [
		from Property
		to Property
	] < RedefinableElement_redefinedElement

	@rdfs:label "subsettedProperty"
	@rdfs:comment "The properties of which this Property is constrained to be a subset, if any."
	relation Property_subsettedProperty [
		from Property
		to Property
	]

	@rdfs:label "ConnectableElement"
	@rdfs:comment "ConnectableElement is an abstract metaclass representing a set of instances that play roles of a StructuredClassifier. ConnectableElements may be joined by attached Connectors and specify configurations of linked instances to be created within an instance of the containing StructuredClassifier."
	aspect ConnectableElement < TypedElement, ParameterableElement

	@rdfs:label "end"
	@rdfs:comment "A set of ConnectorEnds that attach to this ConnectableElement."
	relation ConnectableElement_end [
		from ConnectableElement
		to ConnectorEnd
	]

	@rdfs:label "TypedElement"
	@rdfs:comment "A TypedElement is a NamedElement that may have a Type specified for it."
	aspect TypedElement < NamedElement

	@rdfs:label "type"
	@rdfs:comment "The type of the TypedElement."
	relation TypedElement_type [
		from TypedElement
		to Type
		functional
	]

	@rdfs:label "ConnectorEnd"
	@rdfs:comment "A ConnectorEnd is an endpoint of a Connector, which attaches the Connector to a ConnectableElement."
	concept ConnectorEnd < MultiplicityElement [
		restricts ConnectorEnd_role to exactly 1
	]

	@rdfs:label "definingEnd"
	@rdfs:comment "A derived property referencing the corresponding end on the Association which types the Connector owing this ConnectorEnd, if any. It is derived by selecting the end at the same place in the ordering of Association ends as this ConnectorEnd."
	relation ConnectorEnd_definingEnd [
		from ConnectorEnd
		to Property
		functional
	]

	@rdfs:label "partWithPort"
	@rdfs:comment "Indicates the role of the internal structure of a Classifier with the Port to which the ConnectorEnd is attached."
	relation ConnectorEnd_partWithPort [
		from ConnectorEnd
		to Property
		functional
	]

	@rdfs:label "role"
	@rdfs:comment "The ConnectableElement attached at this ConnectorEnd. When an instance of the containing Classifier is created, a link may (depending on the multiplicities) be created to an instance of the Classifier that types this ConnectableElement."
	relation ConnectorEnd_role [
		from ConnectorEnd
		to ConnectableElement
		functional
	]

	@rdfs:label "MultiplicityElement"
	@rdfs:comment "A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A MultiplicityElement embeds this information to specify the allowable cardinalities for an instantiation of the Element."
	aspect MultiplicityElement < Element [
		restricts MultiplicityElement_isOrdered to exactly 1
		restricts MultiplicityElement_isUnique to exactly 1
		restricts MultiplicityElement_upper to exactly 1
	]

	@rdfs:label "isOrdered"
	@rdfs:comment "For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this MultiplicityElement are sequentially ordered."
	scalar property MultiplicityElement_isOrdered [
		domain MultiplicityElement
		range types:Boolean
		functional
	]

	@rdfs:label "isUnique"
	@rdfs:comment "For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this MultiplicityElement are unique."
	scalar property MultiplicityElement_isUnique [
		domain MultiplicityElement
		range types:Boolean
		functional
	]

	@rdfs:label "lower"
	@rdfs:comment "The lower bound of the multiplicity interval."
	scalar property MultiplicityElement_lower [
		domain MultiplicityElement
		range types:Integer
		functional
	]

	@rdfs:label "lowerValue"
	@rdfs:comment "The specification of the lower bound for this multiplicity."
	relation MultiplicityElement_lowerValue [
		from MultiplicityElement
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "upper"
	@rdfs:comment "The upper bound of the multiplicity interval."
	scalar property MultiplicityElement_upper [
		domain MultiplicityElement
		range types:UnlimitedNatural
		functional
	]

	@rdfs:label "upperValue"
	@rdfs:comment "The specification of the upper bound for this multiplicity."
	relation MultiplicityElement_upperValue [
		from MultiplicityElement
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "ValueSpecification"
	@rdfs:comment "A ValueSpecification is the specification of a (possibly empty) set of values. A ValueSpecification is a ParameterableElement that may be exposed as a formal TemplateParameter and provided as the actual parameter in the binding of a template."
	aspect ValueSpecification < PackageableElement, TypedElement

	@rdfs:label "ConnectableElementTemplateParameter"
	@rdfs:comment "A ConnectableElementTemplateParameter exposes a ConnectableElement as a formal parameter for a template."
	concept ConnectableElementTemplateParameter < TemplateParameter

	@rdfs:label "DeploymentTarget"
	@rdfs:comment "A deployment target is the location for a deployed artifact."
	aspect DeploymentTarget < NamedElement

	@rdfs:label "deployedElement"
	@rdfs:comment "The set of elements that are manifested in an Artifact that is involved in Deployment to a DeploymentTarget."
	relation DeploymentTarget_deployedElement [
		from DeploymentTarget
		to PackageableElement
	]

	@rdfs:label "deployment"
	@rdfs:comment "The set of Deployments for a DeploymentTarget."
	relation DeploymentTarget_deployment [
		from DeploymentTarget
		to Deployment
		@rdfs:label "location"
		@rdfs:comment "The DeployedTarget which is the target of a Deployment."
		reverse Deployment_location
		inverse functional
	] < Element_ownedElement, NamedElement_clientDependency

	@rdfs:label "Deployment"
	@rdfs:comment '''A deployment is the allocation of an artifact or artifact instance to a deployment target.
A component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files.'''
	concept Deployment < Dependency [
		restricts Deployment_location to exactly 1
	]

	@rdfs:label "configuration"
	@rdfs:comment "The specification of properties that parameterize the deployment and execution of one or more Artifacts."
	relation Deployment_configuration [
		from Deployment
		to DeploymentSpecification
		@rdfs:label "deployment"
		@rdfs:comment "The deployment with which the DeploymentSpecification is associated."
		reverse DeploymentSpecification_deployment
	] < Element_ownedElement

	@rdfs:label "deployedArtifact"
	@rdfs:comment "The Artifacts that are deployed onto a Node. This association specializes the supplier association."
	relation Deployment_deployedArtifact [
		from Deployment
		to DeployedArtifact
	] < Dependency_supplier

	@rdfs:label "Dependency"
	@rdfs:comment "A Dependency is a Relationship that signifies that a single model Element or a set of model Elements requires other model Elements for their specification or implementation. This means that the complete semantics of the client Element(s) are either semantically or structurally dependent on the definition of the supplier Element(s)."
	concept Dependency < PackageableElement, DirectedRelationship

	@rdfs:label "client"
	@rdfs:comment "The Element(s) dependent on the supplier Element(s). In some cases (such as a trace Abstraction) the assignment of direction (that is, the designation of the client Element) is at the discretion of the modeler and is a stipulation."
	relation Dependency_client [
		from Dependency
		to NamedElement
		functional
	] < DirectedRelationship_source

	@rdfs:label "supplier"
	@rdfs:comment "The Element(s) on which the client Element(s) depend in some respect. The modeler may stipulate a sense of Dependency direction suitable for their domain."
	relation Dependency_supplier [
		from Dependency
		to NamedElement
		functional
	] < DirectedRelationship_target

	@rdfs:label "DeploymentSpecification"
	@rdfs:comment "A deployment specification specifies a set of properties that determine execution parameters of a component artifact that is deployed on a node. A deployment specification can be aimed at a specific type of container. An artifact that reifies or implements deployment specification properties is a deployment descriptor."
	concept DeploymentSpecification < Artifact

	@rdfs:label "deploymentLocation"
	@rdfs:comment "The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address.'"
	scalar property DeploymentSpecification_deploymentLocation [
		domain DeploymentSpecification
		range types:String
		functional
	]

	@rdfs:label "executionLocation"
	@rdfs:comment "The location where a component Artifact executes. This may be a local or remote location."
	scalar property DeploymentSpecification_executionLocation [
		domain DeploymentSpecification
		range types:String
		functional
	]

	@rdfs:label "Artifact"
	@rdfs:comment '''An artifact is the specification of a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system. Examples of artifacts include model files, source files, scripts, and binary executable files, a table in a database system, a development deliverable, or a word-processing document, a mail message.
An artifact is the source of a deployment to a node.'''
	concept Artifact < Classifier, DeployedArtifact

	@rdfs:label "fileName"
	@rdfs:comment "A concrete name that is used to refer to the Artifact in a physical context. Example: file system name, universal resource locator."
	scalar property Artifact_fileName [
		domain Artifact
		range types:String
		functional
	]

	@rdfs:label "manifestation"
	@rdfs:comment "The set of model elements that are manifested in the Artifact. That is, these model elements are utilized in the construction (or generation) of the artifact."
	relation Artifact_manifestation [
		from Artifact
		to Manifestation
	] < Element_ownedElement, NamedElement_clientDependency

	@rdfs:label "nestedArtifact"
	@rdfs:comment "The Artifacts that are defined (nested) within the Artifact. The association is a specialization of the ownedMember association from Namespace to NamedElement."
	relation Artifact_nestedArtifact [
		from Artifact
		to Artifact
	] < Namespace_ownedMember

	@rdfs:label "ownedAttribute"
	@rdfs:comment "The attributes or association ends defined for the Artifact. The association is a specialization of the ownedMember association."
	relation Artifact_ownedAttribute [
		from Artifact
		to Property
	] < Classifier_attribute, Namespace_ownedMember

	@rdfs:label "ownedOperation"
	@rdfs:comment "The Operations defined for the Artifact. The association is a specialization of the ownedMember association."
	relation Artifact_ownedOperation [
		from Artifact
		to Operation
	] < Classifier_feature, Namespace_ownedMember

	@rdfs:label "DeployedArtifact"
	@rdfs:comment "A deployed artifact is an artifact or artifact instance that has been deployed to a deployment target."
	aspect DeployedArtifact < NamedElement

	@rdfs:label "Manifestation"
	@rdfs:comment "A manifestation is the concrete physical rendering of one or more model elements by an artifact."
	concept Manifestation < Abstraction

	@rdfs:label "utilizedElement"
	@rdfs:comment "The model element that is utilized in the manifestation in an Artifact."
	relation Manifestation_utilizedElement [
		from Manifestation
		to PackageableElement
		functional
	] < Dependency_supplier

	@rdfs:label "Abstraction"
	@rdfs:comment "An Abstraction is a Relationship that relates two Elements or sets of Elements that represent the same concept at different levels of abstraction or from different viewpoints."
	concept Abstraction < Dependency

	@rdfs:label "mapping"
	@rdfs:comment "An OpaqueExpression that states the abstraction relationship between the supplier(s) and the client(s). In some cases, such as derivation, it is usually formal and unidirectional; in other cases, such as trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the Elements is not specified."
	relation Abstraction_mapping [
		from Abstraction
		to OpaqueExpression
		functional
	] < Element_ownedElement

	@rdfs:label "OpaqueExpression"
	@rdfs:comment "An OpaqueExpression is a ValueSpecification that specifies the computation of a collection of values either in terms of a UML Behavior or based on a textual statement in a language other than UML"
	concept OpaqueExpression < ValueSpecification

	@rdfs:label "behavior"
	@rdfs:comment "Specifies the behavior of the OpaqueExpression as a UML Behavior."
	relation OpaqueExpression_behavior [
		from OpaqueExpression
		to Behavior
		functional
	]

	@rdfs:label "body"
	@rdfs:comment "A textual definition of the behavior of the OpaqueExpression, possibly in multiple languages."
	scalar property OpaqueExpression_body [
		domain OpaqueExpression
		range types:String
	]

	@rdfs:label "language"
	@rdfs:comment "Specifies the languages used to express the textual bodies of the OpaqueExpression.  Languages are matched to body Strings by order. The interpretation of the body depends on the languages. If the languages are unspecified, they may be implicit from the expression body or the context."
	scalar property OpaqueExpression_language [
		domain OpaqueExpression
		range types:String
	]

	@rdfs:label "result"
	@rdfs:comment "If an OpaqueExpression is specified using a UML Behavior, then this refers to the single required return Parameter of that Behavior. When the Behavior completes execution, the values on this Parameter give the result of evaluating the OpaqueExpression."
	relation OpaqueExpression_result [
		from OpaqueExpression
		to Parameter
		functional
	]

	@rdfs:label "Parameter"
	@rdfs:comment "A Parameter is a specification of an argument used to pass information into or out of an invocation of a BehavioralFeature.  Parameters can be treated as ConnectableElements within Collaborations."
	concept Parameter < ConnectableElement, MultiplicityElement [
		restricts Parameter_direction to exactly 1
		restricts Parameter_isException to exactly 1
		restricts Parameter_isStream to exactly 1
	]

	@rdfs:label "default"
	@rdfs:comment "A String that represents a value to be used when no argument is supplied for the Parameter."
	scalar property Parameter_default [
		domain Parameter
		range types:String
		functional
	]

	@rdfs:label "defaultValue"
	@rdfs:comment "Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter."
	relation Parameter_defaultValue [
		from Parameter
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "direction"
	@rdfs:comment "Indicates whether a parameter is being sent into or out of a behavioral element."
	scalar property Parameter_direction [
		domain Parameter
		range ParameterDirectionKind
		functional
	]

	@rdfs:label "effect"
	@rdfs:comment "Specifies the effect that executions of the owner of the Parameter have on objects passed in or out of the parameter."
	scalar property Parameter_effect [
		domain Parameter
		range ParameterEffectKind
		functional
	]

	@rdfs:label "isException"
	@rdfs:comment "Tells whether an output parameter may emit a value to the exclusion of the other outputs."
	scalar property Parameter_isException [
		domain Parameter
		range types:Boolean
		functional
	]

	@rdfs:label "isStream"
	@rdfs:comment "Tells whether an input parameter may accept values while its behavior is executing, or whether an output parameter may post values while the behavior is executing."
	scalar property Parameter_isStream [
		domain Parameter
		range types:Boolean
		functional
	]

	@rdfs:label "operation"
	@rdfs:comment "The Operation owning this parameter."
	relation Parameter_operation [
		from Parameter
		to Operation
	] < NamedElement_namespace

	@rdfs:label "parameterSet"
	@rdfs:comment "The ParameterSets containing the parameter. See ParameterSet."
	relation Parameter_parameterSet [
		from Parameter
		to ParameterSet
		@rdfs:label "parameter"
		@rdfs:comment "Parameters in the ParameterSet."
		reverse ParameterSet_parameter
		inverse functional
	]

	@rdfs:label "ParameterDirectionKind"
	@rdfs:comment "ParameterDirectionKind is an Enumeration that defines literals used to specify direction of parameters."
	scalar ParameterDirectionKind [
		oneOf "in", "inout", "out", "return"
	]

	@rdfs:label "ParameterEffectKind"
	@rdfs:comment "ParameterEffectKind is an Enumeration that indicates the effect of a Behavior on values passed in or out of its parameters."
	scalar ParameterEffectKind [
		oneOf "create", "read", "update", "delete"
	]

	@rdfs:label "Operation"
	@rdfs:comment "An Operation is a BehavioralFeature of a Classifier that specifies the name, type, parameters, and constraints for invoking an associated Behavior. An Operation may invoke both the execution of method behaviors as well as other behavioral responses. Operation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template."
	concept Operation < BehavioralFeature, ParameterableElement, TemplateableElement [
		restricts Operation_isOrdered to exactly 1
		restricts Operation_isQuery to exactly 1
		restricts Operation_isUnique to exactly 1
	]

	@rdfs:label "bodyCondition"
	@rdfs:comment "An optional Constraint on the result values of an invocation of this Operation."
	relation Operation_bodyCondition [
		from Operation
		to Constraint
		functional
	] < Namespace_ownedRule

	@rdfs:label "ownedOperation"
	@rdfs:comment "The Operations owned by the DataType."
	relation DataType_ownedOperation [
		from DataType
		to Operation
		@rdfs:label "datatype"
		@rdfs:comment "The DataType that owns this Operation, if any."
		reverse Operation_datatype
	] < Classifier_feature, Namespace_ownedMember

	@rdfs:label "ownedOperation"
	@rdfs:comment "The Operations owned by the Interface."
	relation Interface_ownedOperation [
		from Interface
		to Operation
		@rdfs:label "interface"
		@rdfs:comment "The Interface that owns this Operation, if any."
		reverse Operation_interface
	] < Classifier_feature, Namespace_ownedMember

	@rdfs:label "isOrdered"
	@rdfs:comment "Specifies whether the return parameter is ordered or not, if present.  This information is derived from the return result for this Operation."
	scalar property Operation_isOrdered [
		domain Operation
		range types:Boolean
		functional
	]

	@rdfs:label "isQuery"
	@rdfs:comment "Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false)."
	scalar property Operation_isQuery [
		domain Operation
		range types:Boolean
		functional
	]

	@rdfs:label "isUnique"
	@rdfs:comment "Specifies whether the return parameter is unique or not, if present. This information is derived from the return result for this Operation."
	scalar property Operation_isUnique [
		domain Operation
		range types:Boolean
		functional
	]

	@rdfs:label "lower"
	@rdfs:comment "Specifies the lower multiplicity of the return parameter, if present. This information is derived from the return result for this Operation."
	scalar property Operation_lower [
		domain Operation
		range types:Integer
		functional
	]

	@rdfs:label "postcondition"
	@rdfs:comment "An optional set of Constraints specifying the state of the system when the Operation is completed."
	relation Operation_postcondition [
		from Operation
		to Constraint
	] < Namespace_ownedRule

	@rdfs:label "precondition"
	@rdfs:comment "An optional set of Constraints on the state of the system when the Operation is invoked."
	relation Operation_precondition [
		from Operation
		to Constraint
	] < Namespace_ownedRule

	@rdfs:label "redefinedOperation"
	@rdfs:comment "The Operations that are redefined by this Operation."
	relation Operation_redefinedOperation [
		from Operation
		to Operation
	] < RedefinableElement_redefinedElement

	@rdfs:label "type"
	@rdfs:comment "The return type of the operation, if present. This information is derived from the return result for this Operation."
	relation Operation_type [
		from Operation
		to Type
		functional
	]

	@rdfs:label "upper"
	@rdfs:comment "The upper multiplicity of the return parameter, if present. This information is derived from the return result for this Operation."
	scalar property Operation_upper [
		domain Operation
		range types:UnlimitedNatural
		functional
	]

	@rdfs:label "BehavioralFeature"
	@rdfs:comment "A BehavioralFeature is a feature of a Classifier that specifies an aspect of the behavior of its instances.  A BehavioralFeature is implemented (realized) by a Behavior. A BehavioralFeature specifies that a Classifier will respond to a designated request by invoking its implementing method."
	aspect BehavioralFeature < Namespace, Feature [
		restricts BehavioralFeature_concurrency to exactly 1
		restricts BehavioralFeature_isAbstract to exactly 1
	]

	@rdfs:label "concurrency"
	@rdfs:comment "Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a Class with isActive being false). Active instances control access to their own BehavioralFeatures."
	scalar property BehavioralFeature_concurrency [
		domain BehavioralFeature
		range CallConcurrencyKind
		functional
	]

	@rdfs:label "isAbstract"
	@rdfs:comment "If true, then the BehavioralFeature does not have an implementation, and one must be supplied by a more specific Classifier. If false, the BehavioralFeature must have an implementation in the Classifier or one must be inherited."
	scalar property BehavioralFeature_isAbstract [
		domain BehavioralFeature
		range types:Boolean
		functional
	]

	@rdfs:label "ownedParameter"
	@rdfs:comment "The ordered set of formal Parameters of this BehavioralFeature."
	relation BehavioralFeature_ownedParameter [
		from BehavioralFeature
		to Parameter
	] < Namespace_ownedMember

	@rdfs:label "ownedParameterSet"
	@rdfs:comment "The ParameterSets owned by this BehavioralFeature."
	relation BehavioralFeature_ownedParameterSet [
		from BehavioralFeature
		to ParameterSet
	] < Namespace_ownedMember

	@rdfs:label "raisedException"
	@rdfs:comment "The Types representing exceptions that may be raised during an invocation of this BehavioralFeature."
	relation BehavioralFeature_raisedException [
		from BehavioralFeature
		to Type
	]

	@rdfs:label "Feature"
	@rdfs:comment "A Feature declares a behavioral or structural characteristic of Classifiers."
	aspect Feature < RedefinableElement [
		restricts Feature_isStatic to exactly 1
	]

	@rdfs:label "isStatic"
	@rdfs:comment "Specifies whether this Feature characterizes individual instances classified by the Classifier (false) or the Classifier itself (true)."
	scalar property Feature_isStatic [
		domain Feature
		range types:Boolean
		functional
	]

	@rdfs:label "RedefinableElement"
	@rdfs:comment "A RedefinableElement is an element that, when defined in the context of a Classifier, can be redefined more specifically or differently in the context of another Classifier that specializes (directly or indirectly) the context Classifier."
	aspect RedefinableElement < NamedElement [
		restricts RedefinableElement_isLeaf to exactly 1
	]

	@rdfs:label "isLeaf"
	@rdfs:comment "Indicates whether it is possible to further redefine a RedefinableElement. If the value is true, then it is not possible to further redefine the RedefinableElement."
	scalar property RedefinableElement_isLeaf [
		domain RedefinableElement
		range types:Boolean
		functional
	]

	@rdfs:label "redefinedElement"
	@rdfs:comment "The RedefinableElement that is being redefined by this element."
	relation RedefinableElement_redefinedElement [
		from RedefinableElement
		to RedefinableElement
	]

	@rdfs:label "redefinitionContext"
	@rdfs:comment "The contexts that this element may be redefined from."
	relation RedefinableElement_redefinitionContext [
		from RedefinableElement
		to Classifier
	]

	@rdfs:label "CallConcurrencyKind"
	@rdfs:comment "CallConcurrencyKind is an Enumeration used to specify the semantics of concurrent calls to a BehavioralFeature."
	scalar CallConcurrencyKind [
		oneOf "sequential", "guarded", "concurrent"
	]

	@rdfs:label "ParameterSet"
	@rdfs:comment "A ParameterSet designates alternative sets of inputs or outputs that a Behavior may use."
	concept ParameterSet < NamedElement

	@rdfs:label "condition"
	@rdfs:comment "A constraint that should be satisfied for the owner of the Parameters in an input ParameterSet to start execution using the values provided for those Parameters, or the owner of the Parameters in an output ParameterSet to end execution providing the values for those Parameters, if all preconditions and conditions on input ParameterSets were satisfied."
	relation ParameterSet_condition [
		from ParameterSet
		to Constraint
	] < Element_ownedElement

	@rdfs:label "Constraint"
	@rdfs:comment "A Constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an Element or set of Elements."
	concept Constraint < PackageableElement [
		restricts Constraint_specification to exactly 1
	]

	@rdfs:label "constrainedElement"
	@rdfs:comment "The ordered set of Elements referenced by this Constraint."
	relation Constraint_constrainedElement [
		from Constraint
		to Element
	]

	@rdfs:label "specification"
	@rdfs:comment "A condition that must be true when evaluated in order for the Constraint to be satisfied."
	relation Constraint_specification [
		from Constraint
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "DataType"
	@rdfs:comment "A DataType is a type whose instances are identified only by their value."
	concept DataType < Classifier

	@rdfs:label "Interface"
	@rdfs:comment "Interfaces declare coherent services that are implemented by BehavioredClassifiers that implement the Interfaces via InterfaceRealizations."
	concept Interface < Classifier

	@rdfs:label "nestedClassifier"
	@rdfs:comment "References all the Classifiers that are defined (nested) within the Interface."
	relation Interface_nestedClassifier [
		from Interface
		to Classifier
	] < Namespace_ownedMember

	@rdfs:label "ownedReception"
	@rdfs:comment "Receptions that objects providing this Interface are willing to accept."
	relation Interface_ownedReception [
		from Interface
		to Reception
	] < Classifier_feature, Namespace_ownedMember

	@rdfs:label "protocol"
	@rdfs:comment "References a ProtocolStateMachine specifying the legal sequences of the invocation of the BehavioralFeatures described in the Interface."
	relation Interface_protocol [
		from Interface
		to ProtocolStateMachine
		functional
	] < Namespace_ownedMember

	@rdfs:label "redefinedInterface"
	@rdfs:comment "References all the Interfaces redefined by this Interface."
	relation Interface_redefinedInterface [
		from Interface
		to Interface
	] < Classifier_redefinedClassifier

	@rdfs:label "Reception"
	@rdfs:comment "A Reception is a declaration stating that a Classifier is prepared to react to the receipt of a Signal."
	concept Reception < BehavioralFeature [
		restricts Reception_signal to exactly 1
	]

	@rdfs:label "signal"
	@rdfs:comment "The Signal that this Reception handles."
	relation Reception_signal [
		from Reception
		to Signal
		functional
	]

	@rdfs:label "Signal"
	@rdfs:comment "A Signal is a specification of a kind of communication between objects in which a reaction is asynchronously triggered in the receiver without a reply."
	concept Signal < Classifier

	@rdfs:label "ownedAttribute"
	@rdfs:comment "The attributes owned by the Signal."
	relation Signal_ownedAttribute [
		from Signal
		to Property
	] < Classifier_attribute, Namespace_ownedMember

	@rdfs:label "ProtocolStateMachine"
	@rdfs:comment "A ProtocolStateMachine is always defined in the context of a Classifier. It specifies which BehavioralFeatures of the Classifier can be called in which State and under which conditions, thus specifying the allowed invocation sequences on the Classifier's BehavioralFeatures. A ProtocolStateMachine specifies the possible and permitted Transitions on the instances of its context Classifier, together with the BehavioralFeatures that carry the Transitions. In this manner, an instance lifecycle can be specified for a Classifier, by defining the order in which the BehavioralFeatures can be activated and the States through which an instance progresses during its existence."
	concept ProtocolStateMachine < StateMachine

	@rdfs:label "conformance"
	@rdfs:comment "Conformance between ProtocolStateMachine"
	relation ProtocolStateMachine_conformance [
		from ProtocolStateMachine
		to ProtocolConformance
		@rdfs:label "specificMachine"
		@rdfs:comment "Specifies the ProtocolStateMachine which conforms to the general ProtocolStateMachine."
		reverse ProtocolConformance_specificMachine
		inverse functional
	] < Element_ownedElement

	@rdfs:label "StateMachine"
	@rdfs:comment "StateMachines can be used to express event-driven behaviors of parts of a system. Behavior is modeled as a traversal of a graph of Vertices interconnected by one or more joined Transition arcs that are triggered by the dispatching of successive Event occurrences. During this traversal, the StateMachine may execute a sequence of Behaviors associated with various elements of the StateMachine."
	concept StateMachine < Behavior [
		restricts StateMachine_region to min 1
	]

	@rdfs:label "connectionPoint"
	@rdfs:comment "The connection points defined for this StateMachine. They represent the interface of the StateMachine when used as part of submachine State"
	relation StateMachine_connectionPoint [
		from StateMachine
		to Pseudostate
		@rdfs:label "stateMachine"
		@rdfs:comment "The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint."
		reverse Pseudostate_stateMachine
	] < Namespace_ownedMember

	@rdfs:label "submachineState"
	@rdfs:comment "References the submachine(s) in case of a submachine State. Multiple machines are referenced in case of a concurrent State."
	relation StateMachine_submachineState [
		from StateMachine
		to State
		@rdfs:label "submachine"
		@rdfs:comment "The StateMachine that is to be inserted in place of the (submachine) State."
		reverse State_submachine
	]

	@rdfs:label "region"
	@rdfs:comment "The Regions owned directly by the StateMachine."
	relation StateMachine_region [
		from StateMachine
		to Region
		@rdfs:label "stateMachine"
		@rdfs:comment "The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State."
		reverse Region_stateMachine
	] < Namespace_ownedMember

	@rdfs:label "extendedStateMachine"
	@rdfs:comment "The StateMachines of which this is an extension."
	relation StateMachine_extendedStateMachine [
		from StateMachine
		to StateMachine
	] < Behavior_redefinedBehavior

	@rdfs:label "Pseudostate"
	@rdfs:comment "A Pseudostate is an abstraction that encompasses different types of transient Vertices in the StateMachine graph. A StateMachine instance never comes to rest in a Pseudostate, instead, it will exit and enter the Pseudostate within a single run-to-completion step."
	concept Pseudostate < Vertex [
		restricts Pseudostate_kind to exactly 1
	]

	@rdfs:label "connectionPoint"
	@rdfs:comment "The entry and exit Pseudostates of a composite State. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite States."
	relation State_connectionPoint [
		from State
		to Pseudostate
		@rdfs:label "state"
		@rdfs:comment "The State that owns this Pseudostate and in which it appears."
		reverse Pseudostate_state
	] < Namespace_ownedMember

	@rdfs:label "kind"
	@rdfs:comment "Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice."
	scalar property Pseudostate_kind [
		domain Pseudostate
		range PseudostateKind
		functional
	]

	@rdfs:label "Vertex"
	@rdfs:comment "A Vertex is an abstraction of a node in a StateMachine graph. It can be the source or destination of any number of Transitions."
	aspect Vertex < NamedElement

	@rdfs:label "subvertex"
	@rdfs:comment "The set of Vertices that are owned by this Region."
	relation Region_subvertex [
		from Region
		to Vertex
		@rdfs:label "container"
		@rdfs:comment "The Region that contains this Vertex."
		reverse Vertex_container
	] < Namespace_ownedMember

	@rdfs:label "incoming"
	@rdfs:comment "Specifies the Transitions entering this Vertex."
	relation Vertex_incoming [
		from Vertex
		to Transition
	]

	@rdfs:label "outgoing"
	@rdfs:comment "Specifies the Transitions departing from this Vertex."
	relation Vertex_outgoing [
		from Vertex
		to Transition
	]

	@rdfs:label "Region"
	@rdfs:comment "A Region is a top-level part of a StateMachine or a composite State, that serves as a container for the Vertices and Transitions of the StateMachine. A StateMachine or composite State may contain multiple Regions representing behaviors that may occur in parallel."
	concept Region < Namespace, RedefinableElement

	@rdfs:label "extendedRegion"
	@rdfs:comment "The region of which this region is an extension."
	relation Region_extendedRegion [
		from Region
		to Region
		functional
	] < RedefinableElement_redefinedElement

	@rdfs:label "region"
	@rdfs:comment "The Regions owned directly by the State."
	relation State_region [
		from State
		to Region
		@rdfs:label "state"
		@rdfs:comment "The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine."
		reverse Region_state
	] < Namespace_ownedMember

	@rdfs:label "transition"
	@rdfs:comment "The set of Transitions owned by the Region."
	relation Region_transition [
		from Region
		to Transition
		@rdfs:label "container"
		@rdfs:comment "Designates the Region that owns this Transition."
		reverse Transition_container
		inverse functional
	] < Namespace_ownedMember

	@rdfs:label "State"
	@rdfs:comment "A State models a situation during which some (usually implicit) invariant condition holds."
	concept State < Namespace, RedefinableElement, Vertex [
		restricts State_isComposite to exactly 1
		restricts State_isOrthogonal to exactly 1
		restricts State_isSimple to exactly 1
		restricts State_isSubmachineState to exactly 1
	]

	@rdfs:label "connection"
	@rdfs:comment "The entry and exit connection points used in conjunction with this (submachine) State, i.e., as targets and sources, respectively, in the Region with the submachine State. A connection point reference references the corresponding definition of a connection point Pseudostate in the StateMachine referenced by the submachine State."
	relation State_connection [
		from State
		to ConnectionPointReference
		@rdfs:label "state"
		@rdfs:comment "The State in which the ConnectionPointReference is defined."
		reverse ConnectionPointReference_state
	] < Namespace_ownedMember

	@rdfs:label "deferrableTrigger"
	@rdfs:comment "A list of Triggers that are candidates to be retained by the StateMachine if they trigger no Transitions out of the State (not consumed). A deferred Trigger is retained until the StateMachine reaches a State configuration where it is no longer deferred."
	relation State_deferrableTrigger [
		from State
		to Trigger
	] < Element_ownedElement

	@rdfs:label "doActivity"
	@rdfs:comment "An optional Behavior that is executed while being in the State. The execution starts when this State is entered, and ceases either by itself when done, or when the State is exited, whichever comes first."
	relation State_doActivity [
		from State
		to Behavior
		functional
	] < Element_ownedElement

	@rdfs:label "entry"
	@rdfs:comment "An optional Behavior that is executed whenever this State is entered regardless of the Transition taken to reach the State. If defined, entry Behaviors are always executed to completion prior to any internal Behavior or Transitions performed within the State."
	relation State_entry [
		from State
		to Behavior
		functional
	] < Element_ownedElement

	@rdfs:label "exit"
	@rdfs:comment "An optional Behavior that is executed whenever this State is exited regardless of which Transition was taken out of the State. If defined, exit Behaviors are always executed to completion only after all internal and transition Behaviors have completed execution."
	relation State_exit [
		from State
		to Behavior
		functional
	] < Element_ownedElement

	@rdfs:label "isComposite"
	@rdfs:comment "A state with isComposite=true is said to be a composite State. A composite State is a State that contains at least one Region."
	scalar property State_isComposite [
		domain State
		range types:Boolean
		functional
	]

	@rdfs:label "isOrthogonal"
	@rdfs:comment "A State with isOrthogonal=true is said to be an orthogonal composite State An orthogonal composite State contains two or more Regions."
	scalar property State_isOrthogonal [
		domain State
		range types:Boolean
		functional
	]

	@rdfs:label "isSimple"
	@rdfs:comment "A State with isSimple=true is said to be a simple State A simple State does not have any Regions and it does not refer to any submachine StateMachine."
	scalar property State_isSimple [
		domain State
		range types:Boolean
		functional
	]

	@rdfs:label "isSubmachineState"
	@rdfs:comment "A State with isSubmachineState=true is said to be a submachine State Such a State refers to another StateMachine(submachine)."
	scalar property State_isSubmachineState [
		domain State
		range types:Boolean
		functional
	]

	@rdfs:label "redefinedState"
	@rdfs:comment "The State of which this State is a redefinition."
	relation State_redefinedState [
		from State
		to State
		functional
	] < RedefinableElement_redefinedElement

	@rdfs:label "stateInvariant"
	@rdfs:comment "Specifies conditions that are always true when this State is the current State. In ProtocolStateMachines state invariants are additional conditions to the preconditions of the outgoing Transitions, and to the postcondition of the incoming Transitions."
	relation State_stateInvariant [
		from State
		to Constraint
		functional
	] < Namespace_ownedRule

	@rdfs:label "ConnectionPointReference"
	@rdfs:comment "A ConnectionPointReference represents a usage (as part of a submachine State) of an entry/exit point Pseudostate defined in the StateMachine referenced by the submachine State."
	concept ConnectionPointReference < Vertex

	@rdfs:label "entry"
	@rdfs:comment "The entryPoint Pseudostates corresponding to this connection point."
	relation ConnectionPointReference_entry [
		from ConnectionPointReference
		to Pseudostate
	]

	@rdfs:label "exit"
	@rdfs:comment "The exitPoints kind Pseudostates corresponding to this connection point."
	relation ConnectionPointReference_exit [
		from ConnectionPointReference
		to Pseudostate
	]

	@rdfs:label "Trigger"
	@rdfs:comment "A Trigger specifies a specific point  at which an Event occurrence may trigger an effect in a Behavior. A Trigger may be qualified by the Port on which the Event occurred."
	concept Trigger < NamedElement [
		restricts Trigger_event to exactly 1
	]

	@rdfs:label "event"
	@rdfs:comment "The Event that detected by the Trigger."
	relation Trigger_event [
		from Trigger
		to Event
		functional
	]

	@rdfs:label "port"
	@rdfs:comment "A optional Port of through which the given effect is detected."
	relation Trigger_port [
		from Trigger
		to Port
	]

	@rdfs:label "Event"
	@rdfs:comment "An Event is the specification of some occurrence that may potentially trigger effects by an object."
	aspect Event < PackageableElement

	@rdfs:label "Port"
	@rdfs:comment "A Port is a property of an EncapsulatedClassifier that specifies a distinct interaction point between that EncapsulatedClassifier and its environment or between the (behavior of the) EncapsulatedClassifier and its internal parts. Ports are connected to Properties of the EncapsulatedClassifier by Connectors through which requests can be made to invoke BehavioralFeatures. A Port may specify the services an EncapsulatedClassifier provides (offers) to its environment as well as the services that an EncapsulatedClassifier expects (requires) of its environment.  A Port may have an associated ProtocolStateMachine."
	concept Port < Property [
		restricts Port_isBehavior to exactly 1
		restricts Port_isConjugated to exactly 1
		restricts Port_isService to exactly 1
	]

	@rdfs:label "isBehavior"
	@rdfs:comment "Specifies whether requests arriving at this Port are sent to the classifier behavior of this EncapsulatedClassifier. Such a Port is referred to as a behavior Port. Any invocation of a BehavioralFeature targeted at a behavior Port will be handled by the instance of the owning EncapsulatedClassifier itself, rather than by any instances that it may contain."
	scalar property Port_isBehavior [
		domain Port
		range types:Boolean
		functional
	]

	@rdfs:label "isConjugated"
	@rdfs:comment "Specifies the way that the provided and required Interfaces are derived from the Port’s Type."
	scalar property Port_isConjugated [
		domain Port
		range types:Boolean
		functional
	]

	@rdfs:label "isService"
	@rdfs:comment "If true, indicates that this Port is used to provide the published functionality of an EncapsulatedClassifier.  If false, this Port is used to implement the EncapsulatedClassifier but is not part of the essential externally-visible functionality of the EncapsulatedClassifier and can, therefore, be altered or deleted along with the internal implementation of the EncapsulatedClassifier and other properties that are considered part of its implementation."
	scalar property Port_isService [
		domain Port
		range types:Boolean
		functional
	]

	@rdfs:label "protocol"
	@rdfs:comment "An optional ProtocolStateMachine which describes valid interactions at this interaction point."
	relation Port_protocol [
		from Port
		to ProtocolStateMachine
		functional
	]

	@rdfs:label "provided"
	@rdfs:comment "The Interfaces specifying the set of Operations and Receptions that the EncapsulatedCclassifier offers to its environment via this Port, and which it will handle either directly or by forwarding it to a part of its internal structure. This association is derived according to the value of isConjugated. If isConjugated is false, provided is derived as the union of the sets of Interfaces realized by the type of the port and its supertypes, or directly from the type of the Port if the Port is typed by an Interface. If isConjugated is true, it is derived as the union of the sets of Interfaces used by the type of the Port and its supertypes."
	relation Port_provided [
		from Port
		to Interface
	]

	@rdfs:label "redefinedPort"
	@rdfs:comment "A Port may be redefined when its containing EncapsulatedClassifier is specialized. The redefining Port may have additional Interfaces to those that are associated with the redefined Port or it may replace an Interface by one of its subtypes."
	relation Port_redefinedPort [
		from Port
		to Port
	] < Property_redefinedProperty

	@rdfs:label "required"
	@rdfs:comment "The Interfaces specifying the set of Operations and Receptions that the EncapsulatedCassifier expects its environment to handle via this port. This association is derived according to the value of isConjugated. If isConjugated is false, required is derived as the union of the sets of Interfaces used by the type of the Port and its supertypes. If isConjugated is true, it is derived as the union of the sets of Interfaces realized by the type of the Port and its supertypes, or directly from the type of the Port if the Port is typed by an Interface."
	relation Port_required [
		from Port
		to Interface
	]

	@rdfs:label "Transition"
	@rdfs:comment "A Transition represents an arc between exactly one source Vertex and exactly one Target vertex (the source and targets may be the same Vertex). It may form part of a compound transition, which takes the StateMachine from one steady State configuration to another, representing the full response of the StateMachine to an occurrence of an Event that triggered it."
	concept Transition < Namespace, RedefinableElement [
		restricts Transition_container to exactly 1
		restricts Transition_kind to exactly 1
		restricts Transition_source to exactly 1
		restricts Transition_target to exactly 1
	]

	@rdfs:label "effect"
	@rdfs:comment "Specifies an optional behavior to be performed when the Transition fires."
	relation Transition_effect [
		from Transition
		to Behavior
		functional
	] < Element_ownedElement

	@rdfs:label "guard"
	@rdfs:comment "A guard is a Constraint that provides a fine-grained control over the firing of the Transition. The guard is evaluated when an Event occurrence is dispatched by the StateMachine. If the guard is true at that time, the Transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed."
	relation Transition_guard [
		from Transition
		to Constraint
		functional
	] < Namespace_ownedRule

	@rdfs:label "kind"
	@rdfs:comment "Indicates the precise type of the Transition."
	scalar property Transition_kind [
		domain Transition
		range TransitionKind
		functional
	]

	@rdfs:label "redefinedTransition"
	@rdfs:comment "The Transition that is redefined by this Transition."
	relation Transition_redefinedTransition [
		from Transition
		to Transition
		functional
	] < RedefinableElement_redefinedElement

	@rdfs:label "source"
	@rdfs:comment "Designates the originating Vertex (State or Pseudostate) of the Transition."
	relation Transition_source [
		from Transition
		to Vertex
		functional
	]

	@rdfs:label "target"
	@rdfs:comment "Designates the target Vertex that is reached when the Transition is taken."
	relation Transition_target [
		from Transition
		to Vertex
		functional
	]

	@rdfs:label "trigger"
	@rdfs:comment "Specifies the Triggers that may fire the transition."
	relation Transition_trigger [
		from Transition
		to Trigger
	] < Element_ownedElement

	@rdfs:label "TransitionKind"
	@rdfs:comment "TransitionKind is an Enumeration type used to differentiate the various kinds of Transitions."
	scalar TransitionKind [
		oneOf "internal", "local", "external"
	]

	@rdfs:label "PseudostateKind"
	@rdfs:comment "PseudostateKind is an Enumeration type that is used to differentiate various kinds of Pseudostates."
	scalar PseudostateKind [
		oneOf "initial", "deepHistory", "shallowHistory", "join", "fork", "junction", "choice", "entryPoint", "exitPoint", "terminate"
	]

	@rdfs:label "ProtocolConformance"
	@rdfs:comment "A ProtocolStateMachine can be redefined into a more specific ProtocolStateMachine or into behavioral StateMachine. ProtocolConformance declares that the specific ProtocolStateMachine specifies a protocol that conforms to the general ProtocolStateMachine or that the specific behavioral StateMachine abides by the protocol of the general ProtocolStateMachine."
	concept ProtocolConformance < DirectedRelationship [
		restricts ProtocolConformance_specificMachine to exactly 1
	]

	@rdfs:label "generalMachine"
	@rdfs:comment "Specifies the ProtocolStateMachine to which the specific ProtocolStateMachine conforms."
	relation ProtocolConformance_generalMachine [
		from ProtocolConformance
		to ProtocolStateMachine
		functional
	] < DirectedRelationship_target

	@rdfs:label "OperationTemplateParameter"
	@rdfs:comment "An OperationTemplateParameter exposes an Operation as a formal parameter for a template."
	concept OperationTemplateParameter < TemplateParameter

	@rdfs:label "StructuralFeature"
	@rdfs:comment "A StructuralFeature is a typed feature of a Classifier that specifies the structure of instances of the Classifier."
	aspect StructuralFeature < Feature, TypedElement, MultiplicityElement [
		restricts StructuralFeature_isReadOnly to exactly 1
	]

	@rdfs:label "isReadOnly"
	@rdfs:comment "If isReadOnly is true, the StructuralFeature may not be written to after initialization."
	scalar property StructuralFeature_isReadOnly [
		domain StructuralFeature
		range types:Boolean
		functional
	]

	@rdfs:label "AggregationKind"
	@rdfs:comment "AggregationKind is an Enumeration for specifying the kind of aggregation of a Property."
	scalar AggregationKind [
		oneOf "none", "shared", "composite"
	]

	@rdfs:label "PackageMerge"
	@rdfs:comment "A package merge defines how the contents of one package are extended by the contents of another package."
	concept PackageMerge < DirectedRelationship [
		restricts PackageMerge_receivingPackage to exactly 1
	]

	@rdfs:label "mergedPackage"
	@rdfs:comment "References the Package that is to be merged with the receiving package of the PackageMerge."
	relation PackageMerge_mergedPackage [
		from PackageMerge
		to Package
		functional
	] < DirectedRelationship_target

	@rdfs:label "ProfileApplication"
	@rdfs:comment "A profile application is used to show which profiles have been applied to a package."
	concept ProfileApplication < DirectedRelationship [
		restricts ProfileApplication_applyingPackage to exactly 1
		restricts ProfileApplication_isStrict to exactly 1
	]

	@rdfs:label "appliedProfile"
	@rdfs:comment "References the Profiles that are applied to a Package through this ProfileApplication."
	relation ProfileApplication_appliedProfile [
		from ProfileApplication
		to Profile
		functional
	] < DirectedRelationship_target

	@rdfs:label "isStrict"
	@rdfs:comment "Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied."
	scalar property ProfileApplication_isStrict [
		domain ProfileApplication
		range types:Boolean
		functional
	]

	@rdfs:label "Enumeration"
	@rdfs:comment "An Enumeration is a DataType whose values are enumerated in the model as EnumerationLiterals."
	concept Enumeration < DataType

	@rdfs:label "ownedLiteral"
	@rdfs:comment "The ordered set of literals owned by this Enumeration."
	relation Enumeration_ownedLiteral [
		from Enumeration
		to EnumerationLiteral
		@rdfs:label "enumeration"
		@rdfs:comment "The Enumeration that this EnumerationLiteral is a member of."
		reverse EnumerationLiteral_enumeration
		inverse functional
	] < Namespace_ownedMember

	@rdfs:label "EnumerationLiteral"
	@rdfs:comment "An EnumerationLiteral is a user-defined data value for an Enumeration."
	concept EnumerationLiteral < InstanceSpecification [
		restricts EnumerationLiteral_enumeration to exactly 1
	]

	@rdfs:label "InstanceSpecification"
	@rdfs:comment "An InstanceSpecification is a model element that represents an instance in a modeled system. An InstanceSpecification can act as a DeploymentTarget in a Deployment relationship, in the case that it represents an instance of a Node. It can also act as a DeployedArtifact, if it represents an instance of an Artifact."
	concept InstanceSpecification < DeploymentTarget, PackageableElement, DeployedArtifact

	@rdfs:label "classifier"
	@rdfs:comment "The Classifier or Classifiers of the represented instance. If multiple Classifiers are specified, the instance is classified by all of them."
	relation InstanceSpecification_classifier [
		from InstanceSpecification
		to Classifier
	]

	@rdfs:label "slot"
	@rdfs:comment "A Slot giving the value or values of a StructuralFeature of the instance. An InstanceSpecification can have one Slot per StructuralFeature of its Classifiers, including inherited features. It is not necessary to model a Slot for every StructuralFeature, in which case the InstanceSpecification is a partial description."
	relation InstanceSpecification_slot [
		from InstanceSpecification
		to Slot
		@rdfs:label "owningInstance"
		@rdfs:comment "The InstanceSpecification that owns this Slot."
		reverse Slot_owningInstance
		inverse functional
	] < Element_ownedElement

	@rdfs:label "specification"
	@rdfs:comment "A specification of how to compute, derive, or construct the instance."
	relation InstanceSpecification_specification [
		from InstanceSpecification
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "Slot"
	@rdfs:comment "A Slot designates that an entity modeled by an InstanceSpecification has a value or values for a specific StructuralFeature."
	concept Slot < Element [
		restricts Slot_owningInstance to exactly 1
		restricts Slot_definingFeature to exactly 1
	]

	@rdfs:label "definingFeature"
	@rdfs:comment "The StructuralFeature that specifies the values that may be held by the Slot."
	relation Slot_definingFeature [
		from Slot
		to StructuralFeature
		functional
	]

	@rdfs:label "value"
	@rdfs:comment "The value or values held by the Slot."
	relation Slot_value [
		from Slot
		to ValueSpecification
	] < Element_ownedElement

	@rdfs:label "PrimitiveType"
	@rdfs:comment "A PrimitiveType defines a predefined DataType, without any substructure. A PrimitiveType may have an algebra and operations defined outside of UML, for example, mathematically."
	concept PrimitiveType < DataType

	@rdfs:label "ElementImport"
	@rdfs:comment "An ElementImport identifies a NamedElement in a Namespace other than the one that owns that NamedElement and allows the NamedElement to be referenced using an unqualified name in the Namespace owning the ElementImport."
	concept ElementImport < DirectedRelationship [
		restricts ElementImport_importingNamespace to exactly 1
		restricts ElementImport_visibility to exactly 1
	]

	@rdfs:label "alias"
	@rdfs:comment "Specifies the name that should be added to the importing Namespace in lieu of the name of the imported PackagableElement. The alias must not clash with any other member in the importing Namespace. By default, no alias is used."
	scalar property ElementImport_alias [
		domain ElementImport
		range types:String
		functional
	]

	@rdfs:label "importedElement"
	@rdfs:comment "Specifies the PackageableElement whose name is to be added to a Namespace."
	relation ElementImport_importedElement [
		from ElementImport
		to PackageableElement
		functional
	] < DirectedRelationship_target

	@rdfs:label "visibility"
	@rdfs:comment "Specifies the visibility of the imported PackageableElement within the importingNamespace, i.e., whether the  importedElement will in turn be visible to other Namespaces. If the ElementImport is public, the importedElement will be visible outside the importingNamespace while, if the ElementImport is private, it will not."
	scalar property ElementImport_visibility [
		domain ElementImport
		range VisibilityKind
		functional
	]

	@rdfs:label "PackageImport"
	@rdfs:comment "A PackageImport is a Relationship that imports all the non-private members of a Package into the Namespace owning the PackageImport, so that those Elements may be referred to by their unqualified names in the importingNamespace."
	concept PackageImport < DirectedRelationship [
		restricts PackageImport_importingNamespace to exactly 1
		restricts PackageImport_visibility to exactly 1
	]

	@rdfs:label "importedPackage"
	@rdfs:comment "Specifies the Package whose members are imported into a Namespace."
	relation PackageImport_importedPackage [
		from PackageImport
		to Package
		functional
	] < DirectedRelationship_target

	@rdfs:label "visibility"
	@rdfs:comment "Specifies the visibility of the imported PackageableElements within the importingNamespace, i.e., whether imported Elements will in turn be visible to other Namespaces. If the PackageImport is public, the imported Elements will be visible outside the importingNamespace, while, if the PackageImport is private, they will not."
	scalar property PackageImport_visibility [
		domain PackageImport
		range VisibilityKind
		functional
	]

	@rdfs:label "Extension"
	@rdfs:comment "An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes."
	concept Extension < Association [
		restricts Extension_metaclass to exactly 1
		restricts Extension_isRequired to exactly 1
	]

	@rdfs:label "isRequired"
	@rdfs:comment "Indicates whether an instance of the extending stereotype must be created when an instance of the extended class is created. The attribute value is derived from the value of the lower property of the ExtensionEnd referenced by Extension::ownedEnd; a lower value of 1 means that isRequired is true, but otherwise it is false. Since the default value of ExtensionEnd::lower is 0, the default value of isRequired is false."
	scalar property Extension_isRequired [
		domain Extension
		range types:Boolean
		functional
	]

	@rdfs:label "ExtensionEnd"
	@rdfs:comment '''An extension end is used to tie an extension to a stereotype when extending a metaclass.
The default multiplicity of an extension end is 0..1.'''
	concept ExtensionEnd < Property

	@rdfs:label "Model"
	@rdfs:comment "A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail."
	concept Model < Package

	@rdfs:label "viewpoint"
	@rdfs:comment "The name of the viewpoint that is expressed by a model (this name may refer to a profile definition)."
	scalar property Model_viewpoint [
		domain Model
		range types:String
		functional
	]

	@rdfs:label "StringExpression"
	@rdfs:comment "A StringExpression is an Expression that specifies a String value that is derived by concatenating a sequence of operands with String values or a sequence of subExpressions, some of which might be template parameters."
	concept StringExpression < Expression, TemplateableElement

	@rdfs:label "subExpression"
	@rdfs:comment "The StringExpressions that constitute this StringExpression."
	relation StringExpression_subExpression [
		from StringExpression
		to StringExpression
		@rdfs:label "owningExpression"
		@rdfs:comment "The StringExpression of which this StringExpression is a subExpression."
		reverse StringExpression_owningExpression
	] < Element_ownedElement

	@rdfs:label "Expression"
	@rdfs:comment "An Expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands that are ValueSpecifications. It denotes a (possibly empty) set of values when evaluated in a context."
	concept Expression < ValueSpecification

	@rdfs:label "operand"
	@rdfs:comment "Specifies a sequence of operand ValueSpecifications."
	relation Expression_operand [
		from Expression
		to ValueSpecification
	] < Element_ownedElement

	@rdfs:label "symbol"
	@rdfs:comment "The symbol associated with this node in the expression tree."
	scalar property Expression_symbol [
		domain Expression
		range types:String
		functional
	]

	@rdfs:label "Usage"
	@rdfs:comment "A Usage is a Dependency in which the client Element requires the supplier Element (or set of Elements) for its full implementation or operation."
	concept Usage < Dependency

	@rdfs:label "CollaborationUse"
	@rdfs:comment "A CollaborationUse is used to specify the application of a pattern specified by a Collaboration to a specific situation."
	concept CollaborationUse < NamedElement [
		restricts CollaborationUse_type to exactly 1
	]

	@rdfs:label "roleBinding"
	@rdfs:comment "A mapping between features of the Collaboration and features of the owning Classifier. This mapping indicates which ConnectableElement of the Classifier plays which role(s) in the Collaboration. A ConnectableElement may be bound to multiple roles in the same CollaborationUse (that is, it may play multiple roles)."
	relation CollaborationUse_roleBinding [
		from CollaborationUse
		to Dependency
	] < Element_ownedElement

	@rdfs:label "type"
	@rdfs:comment "The Collaboration which is used in this CollaborationUse. The Collaboration defines the cooperation between its roles which are mapped to ConnectableElements relating to the Classifier owning the CollaborationUse."
	relation CollaborationUse_type [
		from CollaborationUse
		to Collaboration
		functional
	]

	@rdfs:label "Collaboration"
	@rdfs:comment "A Collaboration describes a structure of collaborating elements (roles), each performing a specialized function, which collectively accomplish some desired functionality."
	concept Collaboration < StructuredClassifier, BehavioredClassifier

	@rdfs:label "collaborationRole"
	@rdfs:comment "Represents the participants in the Collaboration."
	relation Collaboration_collaborationRole [
		from Collaboration
		to ConnectableElement
	] < StructuredClassifier_role

	@rdfs:label "StructuredClassifier"
	@rdfs:comment "StructuredClassifiers may contain an internal structure of connected elements each of which plays a role in the overall Behavior modeled by the StructuredClassifier."
	aspect StructuredClassifier < Classifier

	@rdfs:label "ownedAttribute"
	@rdfs:comment "The Properties owned by the StructuredClassifier."
	relation StructuredClassifier_ownedAttribute [
		from StructuredClassifier
		to Property
	] < Classifier_attribute, Namespace_ownedMember, StructuredClassifier_role

	@rdfs:label "ownedConnector"
	@rdfs:comment "The connectors owned by the StructuredClassifier."
	relation StructuredClassifier_ownedConnector [
		from StructuredClassifier
		to Connector
	] < Classifier_feature, Namespace_ownedMember

	@rdfs:label "part"
	@rdfs:comment "The Properties specifying instances that the StructuredClassifier owns by composition. This collection is derived, selecting those owned Properties where isComposite is true."
	relation StructuredClassifier_part [
		from StructuredClassifier
		to Property
	]

	@rdfs:label "role"
	@rdfs:comment "The roles that instances may play in this StructuredClassifier."
	relation StructuredClassifier_role [
		from StructuredClassifier
		to ConnectableElement
	] < Namespace_member

	@rdfs:label "Connector"
	@rdfs:comment "A Connector specifies links that enables communication between two or more instances. In contrast to Associations, which specify links between any instance of the associated Classifiers, Connectors specify links between instances playing the connected parts only."
	concept Connector < Feature [
		restricts Connector_end to min 2
		restricts Connector_kind to exactly 1
	]

	@rdfs:label "contract"
	@rdfs:comment "The set of Behaviors that specify the valid interaction patterns across the Connector."
	relation Connector_contract [
		from Connector
		to Behavior
	]

	@rdfs:label "end"
	@rdfs:comment "A Connector has at least two ConnectorEnds, each representing the participation of instances of the Classifiers typing the ConnectableElements attached to the end. The set of ConnectorEnds is ordered."
	relation Connector_end [
		from Connector
		to ConnectorEnd
	] < Element_ownedElement

	@rdfs:label "kind"
	@rdfs:comment "Indicates the kind of Connector. This is derived: a Connector with one or more ends connected to a Port which is not on a Part and which is not a behavior port is a delegation; otherwise it is an assembly."
	scalar property Connector_kind [
		domain Connector
		range ConnectorKind
		functional
	]

	@rdfs:label "redefinedConnector"
	@rdfs:comment "A Connector may be redefined when its containing Classifier is specialized. The redefining Connector may have a type that specializes the type of the redefined Connector. The types of the ConnectorEnds of the redefining Connector may specialize the types of the ConnectorEnds of the redefined Connector. The properties of the ConnectorEnds of the redefining Connector may be replaced."
	relation Connector_redefinedConnector [
		from Connector
		to Connector
	] < RedefinableElement_redefinedElement

	@rdfs:label "type"
	@rdfs:comment "An optional Association that classifies links corresponding to this Connector."
	relation Connector_type [
		from Connector
		to Association
		functional
	]

	@rdfs:label "ConnectorKind"
	@rdfs:comment "ConnectorKind is an enumeration that defines whether a Connector is an assembly or a delegation."
	scalar ConnectorKind [
		oneOf "assembly", "delegation"
	]

	@rdfs:label "Generalization"
	@rdfs:comment "A Generalization is a taxonomic relationship between a more general Classifier and a more specific Classifier. Each instance of the specific Classifier is also an instance of the general Classifier. The specific Classifier inherits the features of the more general Classifier. A Generalization is owned by the specific Classifier."
	concept Generalization < DirectedRelationship [
		restricts Generalization_specific to exactly 1
	]

	@rdfs:label "general"
	@rdfs:comment "The general classifier in the Generalization relationship."
	relation Generalization_general [
		from Generalization
		to Classifier
		functional
	] < DirectedRelationship_target

	@rdfs:label "generalizationSet"
	@rdfs:comment "Represents a set of instances of Generalization.  A Generalization may appear in many GeneralizationSets."
	relation Generalization_generalizationSet [
		from Generalization
		to GeneralizationSet
		@rdfs:label "generalization"
		@rdfs:comment "Designates the instances of Generalization that are members of this GeneralizationSet."
		reverse GeneralizationSet_generalization
	]

	@rdfs:label "isSubstitutable"
	@rdfs:comment "Indicates whether the specific Classifier can be used wherever the general Classifier can be used. If true, the execution traces of the specific Classifier shall be a superset of the execution traces of the general Classifier. If false, there is no such constraint on execution traces. If unset, the modeler has not stated whether there is such a constraint or not."
	scalar property Generalization_isSubstitutable [
		domain Generalization
		range types:Boolean
		functional
	]

	@rdfs:label "GeneralizationSet"
	@rdfs:comment "A GeneralizationSet is a PackageableElement whose instances represent sets of Generalization relationships."
	concept GeneralizationSet < PackageableElement [
		restricts GeneralizationSet_isCovering to exactly 1
		restricts GeneralizationSet_isDisjoint to exactly 1
	]

	@rdfs:label "isCovering"
	@rdfs:comment "Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet."
	scalar property GeneralizationSet_isCovering [
		domain GeneralizationSet
		range types:Boolean
		functional
	]

	@rdfs:label "isDisjoint"
	@rdfs:comment "Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty."
	scalar property GeneralizationSet_isDisjoint [
		domain GeneralizationSet
		range types:Boolean
		functional
	]

	@rdfs:label "RedefinableTemplateSignature"
	@rdfs:comment "A RedefinableTemplateSignature supports the addition of formal template parameters in a specialization of a template classifier."
	concept RedefinableTemplateSignature < RedefinableElement, TemplateSignature

	@rdfs:label "extendedSignature"
	@rdfs:comment "The signatures extended by this RedefinableTemplateSignature."
	relation RedefinableTemplateSignature_extendedSignature [
		from RedefinableTemplateSignature
		to RedefinableTemplateSignature
	] < RedefinableElement_redefinedElement

	@rdfs:label "inheritedParameter"
	@rdfs:comment "The formal template parameters of the extended signatures."
	relation RedefinableTemplateSignature_inheritedParameter [
		from RedefinableTemplateSignature
		to TemplateParameter
	] < TemplateSignature_parameter

	@rdfs:label "classifier"
	@rdfs:comment "The Classifier that owns this RedefinableTemplateSignature."
	relation RedefinableTemplateSignature_classifier [
		from RedefinableTemplateSignature
		to Classifier
		functional
	] < RedefinableElement_redefinitionContext, TemplateSignature_template

	@rdfs:label "UseCase"
	@rdfs:comment "A UseCase specifies a set of actions performed by its subjects, which yields an observable result that is of value for one or more Actors or other stakeholders of each subject."
	concept UseCase < BehavioredClassifier

	@rdfs:label "extend"
	@rdfs:comment "The Extend relationships owned by this UseCase."
	relation UseCase_extend [
		from UseCase
		to Extend
		@rdfs:label "extension"
		@rdfs:comment "The UseCase that represents the extension and owns the Extend relationship."
		reverse Extend_extension
		inverse functional
	] < Namespace_ownedMember

	@rdfs:label "extensionPoint"
	@rdfs:comment "The ExtensionPoints owned by this UseCase."
	relation UseCase_extensionPoint [
		from UseCase
		to ExtensionPoint
		@rdfs:label "useCase"
		@rdfs:comment "The UseCase that owns this ExtensionPoint."
		reverse ExtensionPoint_useCase
		inverse functional
	] < Namespace_ownedMember

	@rdfs:label "include"
	@rdfs:comment "The Include relationships owned by this UseCase."
	relation UseCase_include [
		from UseCase
		to Include
		@rdfs:label "includingCase"
		@rdfs:comment "The UseCase which includes the addition and owns the Include relationship."
		reverse Include_includingCase
		inverse functional
	] < Namespace_ownedMember

	@rdfs:label "Extend"
	@rdfs:comment "A relationship from an extending UseCase to an extended UseCase that specifies how and when the behavior defined in the extending UseCase can be inserted into the behavior defined in the extended UseCase."
	concept Extend < NamedElement, DirectedRelationship [
		restricts Extend_extension to exactly 1
		restricts Extend_extensionLocation to min 1
	]

	@rdfs:label "condition"
	@rdfs:comment "References the condition that must hold when the first ExtensionPoint is reached for the extension to take place. If no constraint is associated with the Extend relationship, the extension is unconditional."
	relation Extend_condition [
		from Extend
		to Constraint
		functional
	] < Element_ownedElement

	@rdfs:label "extendedCase"
	@rdfs:comment "The UseCase that is being extended."
	relation Extend_extendedCase [
		from Extend
		to UseCase
		functional
	] < DirectedRelationship_target

	@rdfs:label "extensionLocation"
	@rdfs:comment "An ordered list of ExtensionPoints belonging to the extended UseCase, specifying where the respective behavioral fragments of the extending UseCase are to be inserted. The first fragment in the extending UseCase is associated with the first extension point in the list, the second fragment with the second point, and so on. Note that, in most practical cases, the extending UseCase has just a single behavior fragment, so that the list of ExtensionPoints is trivial."
	relation Extend_extensionLocation [
		from Extend
		to ExtensionPoint
	]

	@rdfs:label "ExtensionPoint"
	@rdfs:comment "An ExtensionPoint identifies a point in the behavior of a UseCase where that behavior can be extended by the behavior of some other (extending) UseCase, as specified by an Extend relationship."
	concept ExtensionPoint < RedefinableElement [
		restricts ExtensionPoint_useCase to exactly 1
	]

	@rdfs:label "Include"
	@rdfs:comment "An Include relationship specifies that a UseCase contains the behavior defined in another UseCase."
	concept Include < NamedElement, DirectedRelationship [
		restricts Include_includingCase to exactly 1
	]

	@rdfs:label "addition"
	@rdfs:comment "The UseCase that is to be included."
	relation Include_addition [
		from Include
		to UseCase
		functional
	] < DirectedRelationship_target

	@rdfs:label "Substitution"
	@rdfs:comment "A substitution is a relationship between two classifiers signifying that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected."
	concept Substitution < Realization [
		restricts Substitution_substitutingClassifier to exactly 1
	]

	@rdfs:label "contract"
	@rdfs:comment "The contract with which the substituting classifier complies."
	relation Substitution_contract [
		from Substitution
		to Classifier
		functional
	] < Dependency_supplier

	@rdfs:label "Realization"
	@rdfs:comment "Realization is a specialized Abstraction relationship between two sets of model Elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc."
	concept Realization < Abstraction

	@rdfs:label "ClassifierTemplateParameter"
	@rdfs:comment "A ClassifierTemplateParameter exposes a Classifier as a formal template parameter."
	concept ClassifierTemplateParameter < TemplateParameter [
		restricts ClassifierTemplateParameter_allowSubstitutable to exactly 1
	]

	@rdfs:label "allowSubstitutable"
	@rdfs:comment "Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter."
	scalar property ClassifierTemplateParameter_allowSubstitutable [
		domain ClassifierTemplateParameter
		range types:Boolean
		functional
	]

	@rdfs:label "constrainingClassifier"
	@rdfs:comment "The classifiers that constrain the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any Classifier that is compatible with this constraining Classifier can be substituted; otherwise, it must be either this Classifier or one of its specializations. If this property is empty, there are no constraints on the Classifier that can be used as an argument."
	relation ClassifierTemplateParameter_constrainingClassifier [
		from ClassifierTemplateParameter
		to Classifier
	]

	@rdfs:label "InterfaceRealization"
	@rdfs:comment "An InterfaceRealization is a specialized realization relationship between a BehavioredClassifier and an Interface. This relationship signifies that the realizing BehavioredClassifier conforms to the contract specified by the Interface."
	concept InterfaceRealization < Realization [
		restricts InterfaceRealization_implementingClassifier to exactly 1
	]

	@rdfs:label "contract"
	@rdfs:comment "References the Interface specifying the conformance contract."
	relation InterfaceRealization_contract [
		from InterfaceRealization
		to Interface
		functional
	] < Dependency_supplier

	@rdfs:label "EncapsulatedClassifier"
	@rdfs:comment "An EncapsulatedClassifier may own Ports to specify typed interaction points."
	aspect EncapsulatedClassifier < StructuredClassifier

	@rdfs:label "ownedPort"
	@rdfs:comment "The Ports owned by the EncapsulatedClassifier."
	relation EncapsulatedClassifier_ownedPort [
		from EncapsulatedClassifier
		to Port
	] < StructuredClassifier_ownedAttribute

	@rdfs:label "ActivityGroup"
	@rdfs:comment "ActivityGroup is an abstract class for defining sets of ActivityNodes and ActivityEdges in an Activity."
	aspect ActivityGroup < NamedElement, ActivityContent

	@rdfs:label "containedEdge"
	@rdfs:comment "ActivityEdges immediately contained in the ActivityGroup."
	relation ActivityGroup_containedEdge [
		from ActivityGroup
		to ActivityEdge
		@rdfs:label "inGroup"
		@rdfs:comment "ActivityGroups containing the ActivityEdge."
		reverse ActivityEdge_inGroup
	]

	@rdfs:label "containedNode"
	@rdfs:comment "ActivityNodes immediately contained in the ActivityGroup."
	relation ActivityGroup_containedNode [
		from ActivityGroup
		to ActivityNode
		@rdfs:label "inGroup"
		@rdfs:comment "ActivityGroups containing the ActivityNode."
		reverse ActivityNode_inGroup
	]

	@rdfs:label "subgroup"
	@rdfs:comment "Other ActivityGroups immediately contained in this ActivityGroup."
	relation ActivityGroup_subgroup [
		from ActivityGroup
		to ActivityGroup
		@rdfs:label "superGroup"
		@rdfs:comment "The ActivityGroup immediately containing this ActivityGroup, if it is directly owned by another ActivityGroup."
		reverse ActivityGroup_superGroup
	] < Element_ownedElement

	@rdfs:label "ActivityEdge"
	@rdfs:comment "An ActivityEdge is an abstract class for directed connections between two ActivityNodes."
	aspect ActivityEdge < RedefinableElement [
		restricts ActivityEdge_target to exactly 1
		restricts ActivityEdge_source to exactly 1
	]

	@rdfs:label "guard"
	@rdfs:comment "A ValueSpecification that is evaluated to determine if a token can traverse the ActivityEdge. If an ActivityEdge has no guard, then there is no restriction on tokens traversing the edge."
	relation ActivityEdge_guard [
		from ActivityEdge
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "edge"
	@rdfs:comment "ActivityEdges immediately contained in the ActivityPartition."
	relation ActivityPartition_edge [
		from ActivityPartition
		to ActivityEdge
		@rdfs:label "inPartition"
		@rdfs:comment "ActivityPartitions containing the ActivityEdge."
		reverse ActivityEdge_inPartition
	] < ActivityGroup_containedEdge

	@rdfs:label "interruptingEdge"
	@rdfs:comment "The ActivityEdges leaving the InterruptibleActivityRegion on which a traversing token will result in the termination of other tokens flowing in the InterruptibleActivityRegion."
	relation InterruptibleActivityRegion_interruptingEdge [
		from InterruptibleActivityRegion
		to ActivityEdge
		@rdfs:label "interrupts"
		@rdfs:comment "The InterruptibleActivityRegion for which this ActivityEdge is an interruptingEdge."
		reverse ActivityEdge_interrupts
	]

	@rdfs:label "edge"
	@rdfs:comment "The ActivityEdges immediately contained in the StructuredActivityNode."
	relation StructuredActivityNode_edge [
		from StructuredActivityNode
		to ActivityEdge
		@rdfs:label "inStructuredNode"
		@rdfs:comment "The StructuredActivityNode containing the ActivityEdge, if it is owned by a StructuredActivityNode."
		reverse ActivityEdge_inStructuredNode
	] < ActivityGroup_containedEdge, Element_ownedElement

	@rdfs:label "incoming"
	@rdfs:comment "ActivityEdges that have the ActivityNode as their target."
	relation ActivityNode_incoming [
		from ActivityNode
		to ActivityEdge
		@rdfs:label "target"
		@rdfs:comment "The ActivityNode to which tokens are put when they traverse the ActivityEdge."
		reverse ActivityEdge_target
		inverse functional
	]

	@rdfs:label "outgoing"
	@rdfs:comment "ActivityEdges that have the ActivityNode as their source."
	relation ActivityNode_outgoing [
		from ActivityNode
		to ActivityEdge
		@rdfs:label "source"
		@rdfs:comment "The ActivityNode from which tokens are taken when they traverse the ActivityEdge."
		reverse ActivityEdge_source
		inverse functional
	]

	@rdfs:label "redefinedEdge"
	@rdfs:comment "ActivityEdges from a generalization of the Activity containing this ActivityEdge that are redefined by this ActivityEdge."
	relation ActivityEdge_redefinedEdge [
		from ActivityEdge
		to ActivityEdge
	] < RedefinableElement_redefinedElement

	@rdfs:label "weight"
	@rdfs:comment "The minimum number of tokens that must traverse the ActivityEdge at the same time. If no weight is specified, this is equivalent to specifying a constant value of 1."
	relation ActivityEdge_weight [
		from ActivityEdge
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "ActivityPartition"
	@rdfs:comment "An ActivityPartition is a kind of ActivityGroup for identifying ActivityNodes that have some characteristic in common."
	concept ActivityPartition < ActivityGroup [
		restricts ActivityPartition_isDimension to exactly 1
		restricts ActivityPartition_isExternal to exactly 1
	]

	@rdfs:label "isDimension"
	@rdfs:comment "Indicates whether the ActivityPartition groups other ActivityPartitions along a dimension."
	scalar property ActivityPartition_isDimension [
		domain ActivityPartition
		range types:Boolean
		functional
	]

	@rdfs:label "isExternal"
	@rdfs:comment "Indicates whether the ActivityPartition represents an entity to which the partitioning structure does not apply."
	scalar property ActivityPartition_isExternal [
		domain ActivityPartition
		range types:Boolean
		functional
	]

	@rdfs:label "node"
	@rdfs:comment "ActivityNodes immediately contained in the ActivityPartition."
	relation ActivityPartition_node [
		from ActivityPartition
		to ActivityNode
		@rdfs:label "inPartition"
		@rdfs:comment "ActivityPartitions containing the ActivityNode."
		reverse ActivityNode_inPartition
	] < ActivityGroup_containedNode

	@rdfs:label "represents"
	@rdfs:comment "An Element represented by the functionality modeled within the ActivityPartition."
	relation ActivityPartition_represents [
		from ActivityPartition
		to Element
		functional
	]

	@rdfs:label "subpartition"
	@rdfs:comment "Other ActivityPartitions immediately contained in this ActivityPartition (as its subgroups)."
	relation ActivityPartition_subpartition [
		from ActivityPartition
		to ActivityPartition
		@rdfs:label "superPartition"
		@rdfs:comment "Other ActivityPartitions immediately containing this ActivityPartition (as its superGroups)."
		reverse ActivityPartition_superPartition
	] < ActivityGroup_subgroup

	@rdfs:label "ActivityNode"
	@rdfs:comment "ActivityNode is an abstract class for points in the flow of an Activity connected by ActivityEdges."
	aspect ActivityNode < RedefinableElement, ActivityContent

	@rdfs:label "node"
	@rdfs:comment "ActivityNodes immediately contained in the InterruptibleActivityRegion."
	relation InterruptibleActivityRegion_node [
		from InterruptibleActivityRegion
		to ActivityNode
		@rdfs:label "inInterruptibleRegion"
		@rdfs:comment "InterruptibleActivityRegions containing the ActivityNode."
		reverse ActivityNode_inInterruptibleRegion
	] < ActivityGroup_containedNode

	@rdfs:label "node"
	@rdfs:comment "The ActivityNodes immediately contained in the StructuredActivityNode."
	relation StructuredActivityNode_node [
		from StructuredActivityNode
		to ActivityNode
		@rdfs:label "inStructuredNode"
		@rdfs:comment "The StructuredActivityNode containing the ActvityNode, if it is directly owned by a StructuredActivityNode."
		reverse ActivityNode_inStructuredNode
	] < ActivityGroup_containedNode, Element_ownedElement

	@rdfs:label "redefinedNode"
	@rdfs:comment "ActivityNodes from a generalization of the Activity containining this ActivityNode that are redefined by this ActivityNode."
	relation ActivityNode_redefinedNode [
		from ActivityNode
		to ActivityNode
	] < RedefinableElement_redefinedElement

	@rdfs:label "InterruptibleActivityRegion"
	@rdfs:comment "An InterruptibleActivityRegion is an ActivityGroup that supports the termination of tokens flowing in the portions of an activity within it."
	concept InterruptibleActivityRegion < ActivityGroup

	@rdfs:label "StructuredActivityNode"
	@rdfs:comment "A StructuredActivityNode is an Action that is also an ActivityGroup and whose behavior is specified by the ActivityNodes and ActivityEdges it so contains. Unlike other kinds of ActivityGroup, a StructuredActivityNode owns the ActivityNodes and ActivityEdges it contains, and so a node or edge can only be directly contained in one StructuredActivityNode, though StructuredActivityNodes may be nested."
	concept StructuredActivityNode < Action, Namespace, ActivityGroup [
		restricts StructuredActivityNode_mustIsolate to exactly 1
	]

	@rdfs:label "mustIsolate"
	@rdfs:comment "If true, then any object used by an Action within the StructuredActivityNode cannot be accessed by any Action outside the node until the StructuredActivityNode as a whole completes. Any concurrent Actions that would result in accessing such objects are required to have their execution deferred until the completion of the StructuredActivityNode."
	scalar property StructuredActivityNode_mustIsolate [
		domain StructuredActivityNode
		range types:Boolean
		functional
	]

	@rdfs:label "structuredNodeInput"
	@rdfs:comment "The InputPins owned by the StructuredActivityNode."
	relation StructuredActivityNode_structuredNodeInput [
		from StructuredActivityNode
		to InputPin
	] < Action_input

	@rdfs:label "structuredNodeOutput"
	@rdfs:comment "The OutputPins owned by the StructuredActivityNode."
	relation StructuredActivityNode_structuredNodeOutput [
		from StructuredActivityNode
		to OutputPin
	] < Action_output

	@rdfs:label "variable"
	@rdfs:comment "The Variables defined in the scope of the StructuredActivityNode."
	relation StructuredActivityNode_variable [
		from StructuredActivityNode
		to Variable
		@rdfs:label "scope"
		@rdfs:comment "A StructuredActivityNode that owns the Variable."
		reverse Variable_scope
	] < Namespace_ownedMember

	@rdfs:label "Action"
	@rdfs:comment "An Action is the fundamental unit of executable functionality. The execution of an Action represents some transformation or processing in the modeled system. Actions provide the ExecutableNodes within Activities and may also be used within Interactions."
	aspect Action < ExecutableNode [
		restricts Action_isLocallyReentrant to exactly 1
	]

	@rdfs:label "context"
	@rdfs:comment "The context Classifier of the Behavior that contains this Action, or the Behavior itself if it has no context."
	relation Action_context [
		from Action
		to Classifier
		functional
	]

	@rdfs:label "input"
	@rdfs:comment "The ordered set of InputPins representing the inputs to the Action."
	relation Action_input [
		from Action
		to InputPin
	] < Element_ownedElement

	@rdfs:label "isLocallyReentrant"
	@rdfs:comment "If true, the Action can begin a new, concurrent execution, even if there is already another execution of the Action ongoing. If false, the Action cannot begin a new execution until any previous execution has completed."
	scalar property Action_isLocallyReentrant [
		domain Action
		range types:Boolean
		functional
	]

	@rdfs:label "localPostcondition"
	@rdfs:comment "A Constraint that must be satisfied when execution of the Action is completed."
	relation Action_localPostcondition [
		from Action
		to Constraint
	] < Element_ownedElement

	@rdfs:label "localPrecondition"
	@rdfs:comment "A Constraint that must be satisfied when execution of the Action is started."
	relation Action_localPrecondition [
		from Action
		to Constraint
	] < Element_ownedElement

	@rdfs:label "output"
	@rdfs:comment "The ordered set of OutputPins representing outputs from the Action."
	relation Action_output [
		from Action
		to OutputPin
	] < Element_ownedElement

	@rdfs:label "ExecutableNode"
	@rdfs:comment "An ExecutableNode is an abstract class for ActivityNodes whose execution may be controlled using ControlFlows and to which ExceptionHandlers may be attached."
	aspect ExecutableNode < ActivityNode

	@rdfs:label "handler"
	@rdfs:comment "A set of ExceptionHandlers that are examined if an exception propagates out of the ExceptionNode."
	relation ExecutableNode_handler [
		from ExecutableNode
		to ExceptionHandler
		@rdfs:label "protectedNode"
		@rdfs:comment "The ExecutableNode protected by the ExceptionHandler. If an exception propagates out of the protectedNode and has a type matching one of the exceptionTypes, then it is caught by this ExceptionHandler."
		reverse ExceptionHandler_protectedNode
		inverse functional
	] < Element_ownedElement

	@rdfs:label "ExceptionHandler"
	@rdfs:comment "An ExceptionHandler is an Element that specifies a handlerBody ExecutableNode to execute in case the specified exception occurs during the execution of the protected ExecutableNode."
	concept ExceptionHandler < Element [
		restricts ExceptionHandler_protectedNode to exactly 1
		restricts ExceptionHandler_exceptionInput to exactly 1
		restricts ExceptionHandler_exceptionType to min 1
		restricts ExceptionHandler_handlerBody to exactly 1
	]

	@rdfs:label "exceptionInput"
	@rdfs:comment "An ObjectNode within the handlerBody. When the ExceptionHandler catches an exception, the exception token is placed on this ObjectNode, causing the handlerBody to execute."
	relation ExceptionHandler_exceptionInput [
		from ExceptionHandler
		to ObjectNode
		functional
	]

	@rdfs:label "exceptionType"
	@rdfs:comment "The Classifiers whose instances the ExceptionHandler catches as exceptions. If an exception occurs whose type is any exceptionType, the ExceptionHandler catches the exception and executes the handlerBody."
	relation ExceptionHandler_exceptionType [
		from ExceptionHandler
		to Classifier
	]

	@rdfs:label "handlerBody"
	@rdfs:comment "An ExecutableNode that is executed if the ExceptionHandler catches an exception."
	relation ExceptionHandler_handlerBody [
		from ExceptionHandler
		to ExecutableNode
		functional
	]

	@rdfs:label "ObjectNode"
	@rdfs:comment "An ObjectNode is an abstract ActivityNode that may hold tokens within the object flow in an Activity. ObjectNodes also support token selection, limitation on the number of tokens held, specification of the state required for tokens being held, and carrying control values."
	aspect ObjectNode < ActivityNode, TypedElement [
		restricts ObjectNode_isControlType to exactly 1
		restricts ObjectNode_ordering to exactly 1
	]

	@rdfs:label "inState"
	@rdfs:comment "The States required to be associated with the values held by tokens on this ObjectNode."
	relation ObjectNode_inState [
		from ObjectNode
		to State
	]

	@rdfs:label "isControlType"
	@rdfs:comment "Indicates whether the type of the ObjectNode is to be treated as representing control values that may traverse ControlFlows."
	scalar property ObjectNode_isControlType [
		domain ObjectNode
		range types:Boolean
		functional
	]

	@rdfs:label "ordering"
	@rdfs:comment "Indicates how the tokens held by the ObjectNode are ordered for selection to traverse ActivityEdges outgoing from the ObjectNode."
	scalar property ObjectNode_ordering [
		domain ObjectNode
		range ObjectNodeOrderingKind
		functional
	]

	@rdfs:label "selection"
	@rdfs:comment "A Behavior used to select tokens to be offered on outgoing ActivityEdges."
	relation ObjectNode_selection [
		from ObjectNode
		to Behavior
		functional
	]

	@rdfs:label "upperBound"
	@rdfs:comment "The maximum number of tokens that may be held by this ObjectNode. Tokens cannot flow into the ObjectNode if the upperBound is reached. If no upperBound is specified, then there is no limit on how many tokens the ObjectNode can hold."
	relation ObjectNode_upperBound [
		from ObjectNode
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "ObjectNodeOrderingKind"
	@rdfs:comment "ObjectNodeOrderingKind is an enumeration indicating queuing order for offering the tokens held by an ObjectNode."
	scalar ObjectNodeOrderingKind [
		oneOf "unordered", "ordered", "LIFO", "FIFO"
	]

	@rdfs:label "InputPin"
	@rdfs:comment "An InputPin is a Pin that holds input values to be consumed by an Action."
	concept InputPin < Pin

	@rdfs:label "Pin"
	@rdfs:comment "A Pin is an ObjectNode and MultiplicityElement that provides input values to an Action or accepts output values from an Action."
	aspect Pin < ObjectNode, MultiplicityElement [
		restricts Pin_isControl to exactly 1
	]

	@rdfs:label "isControl"
	@rdfs:comment "Indicates whether the Pin provides data to the Action or just controls how the Action executes."
	scalar property Pin_isControl [
		domain Pin
		range types:Boolean
		functional
	]

	@rdfs:label "OutputPin"
	@rdfs:comment "An OutputPin is a Pin that holds output values produced by an Action."
	concept OutputPin < Pin

	@rdfs:label "Variable"
	@rdfs:comment "A Variable is a ConnectableElement that may store values during the execution of an Activity. Reading and writing the values of a Variable provides an alternative means for passing data than the use of ObjectFlows. A Variable may be owned directly by an Activity, in which case it is accessible from anywhere within that activity, or it may be owned by a StructuredActivityNode, in which case it is only accessible within that node."
	concept Variable < ConnectableElement, MultiplicityElement

	@rdfs:label "ValueSpecificationAction"
	@rdfs:comment "A ValueSpecificationAction is an Action that evaluates a ValueSpecification and provides a result."
	concept ValueSpecificationAction < Action [
		restricts ValueSpecificationAction_result to exactly 1
		restricts ValueSpecificationAction_value to exactly 1
	]

	@rdfs:label "result"
	@rdfs:comment "The OutputPin on which the result value is placed."
	relation ValueSpecificationAction_result [
		from ValueSpecificationAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "value"
	@rdfs:comment "The ValueSpecification to be evaluated."
	relation ValueSpecificationAction_value [
		from ValueSpecificationAction
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "VariableAction"
	@rdfs:comment "VariableAction is an abstract class for Actions that operate on a specified Variable."
	aspect VariableAction < Action [
		restricts VariableAction_variable to exactly 1
	]

	@rdfs:label "variable"
	@rdfs:comment "The Variable to be read or written."
	relation VariableAction_variable [
		from VariableAction
		to Variable
		functional
	]

	@rdfs:label "WriteLinkAction"
	@rdfs:comment "WriteLinkAction is an abstract class for LinkActions that create and destroy links."
	aspect WriteLinkAction < LinkAction

	@rdfs:label "LinkAction"
	@rdfs:comment "LinkAction is an abstract class for all Actions that identify the links to be acted on using LinkEndData."
	aspect LinkAction < Action [
		restricts LinkAction_endData to min 2
		restricts LinkAction_inputValue to min 1
	]

	@rdfs:label "endData"
	@rdfs:comment "The LinkEndData identifying the values on the ends of the links acting on by this LinkAction."
	relation LinkAction_endData [
		from LinkAction
		to LinkEndData
	] < Element_ownedElement

	@rdfs:label "inputValue"
	@rdfs:comment "InputPins used by the LinkEndData of the LinkAction."
	relation LinkAction_inputValue [
		from LinkAction
		to InputPin
	] < Action_input

	@rdfs:label "LinkEndData"
	@rdfs:comment "LinkEndData is an Element that identifies on end of a link to be read or written by a LinkAction. As a link (that is not a link object) cannot be passed as a runtime value to or from an Action, it is instead identified by its end objects and qualifier values, if any. A LinkEndData instance provides these values for a single Association end."
	concept LinkEndData < Element [
		restricts LinkEndData_end to exactly 1
	]

	@rdfs:label "end"
	@rdfs:comment "The Association end for which this LinkEndData specifies values."
	relation LinkEndData_end [
		from LinkEndData
		to Property
		functional
	]

	@rdfs:label "qualifier"
	@rdfs:comment "A set of QualifierValues used to provide values for the qualifiers of the end."
	relation LinkEndData_qualifier [
		from LinkEndData
		to QualifierValue
	] < Element_ownedElement

	@rdfs:label "value"
	@rdfs:comment 'The InputPin that provides the specified value for the given end. This InputPin is omitted if the LinkEndData specifies the "open" end for a ReadLinkAction.'
	relation LinkEndData_value [
		from LinkEndData
		to InputPin
		functional
	]

	@rdfs:label "QualifierValue"
	@rdfs:comment "A QualifierValue is an Element that is used as part of LinkEndData to provide the value for a single qualifier of the end given by the LinkEndData."
	concept QualifierValue < Element [
		restricts QualifierValue_qualifier to exactly 1
		restricts QualifierValue_value to exactly 1
	]

	@rdfs:label "qualifier"
	@rdfs:comment "The qualifier Property for which the value is to be specified."
	relation QualifierValue_qualifier [
		from QualifierValue
		to Property
		functional
	]

	@rdfs:label "value"
	@rdfs:comment "The InputPin from which the specified value for the qualifier is taken."
	relation QualifierValue_value [
		from QualifierValue
		to InputPin
		functional
	]

	@rdfs:label "WriteStructuralFeatureAction"
	@rdfs:comment "WriteStructuralFeatureAction is an abstract class for StructuralFeatureActions that change StructuralFeature values."
	aspect WriteStructuralFeatureAction < StructuralFeatureAction

	@rdfs:label "result"
	@rdfs:comment "The OutputPin on which is put the input object as modified by the WriteStructuralFeatureAction."
	relation WriteStructuralFeatureAction_result [
		from WriteStructuralFeatureAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "value"
	@rdfs:comment "The InputPin that provides the value to be added or removed from the StructuralFeature."
	relation WriteStructuralFeatureAction_value [
		from WriteStructuralFeatureAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "StructuralFeatureAction"
	@rdfs:comment "StructuralFeatureAction is an abstract class for all Actions that operate on StructuralFeatures."
	aspect StructuralFeatureAction < Action [
		restricts StructuralFeatureAction_object to exactly 1
		restricts StructuralFeatureAction_structuralFeature to exactly 1
	]

	@rdfs:label "object"
	@rdfs:comment "The InputPin from which the object whose StructuralFeature is to be read or written is obtained."
	relation StructuralFeatureAction_object [
		from StructuralFeatureAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "structuralFeature"
	@rdfs:comment "The StructuralFeature to be read or written."
	relation StructuralFeatureAction_structuralFeature [
		from StructuralFeatureAction
		to StructuralFeature
		functional
	]

	@rdfs:label "WriteVariableAction"
	@rdfs:comment "WriteVariableAction is an abstract class for VariableActions that change Variable values."
	aspect WriteVariableAction < VariableAction

	@rdfs:label "value"
	@rdfs:comment "The InputPin that gives the value to be added or removed from the Variable."
	relation WriteVariableAction_value [
		from WriteVariableAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "ExpansionKind"
	@rdfs:comment "ExpansionKind is an enumeration type used to specify how an ExpansionRegion executes its contents."
	scalar ExpansionKind [
		oneOf "parallel", "iterative", "stream"
	]

	@rdfs:label "AcceptCallAction"
	@rdfs:comment "An AcceptCallAction is an AcceptEventAction that handles the receipt of a synchronous call request. In addition to the values from the Operation input parameters, the Action produces an output that is needed later to supply the information to the ReplyAction necessary to return control to the caller. An AcceptCallAction is for synchronous calls. If it is used to handle an asynchronous call, execution of the subsequent ReplyAction will complete immediately with no effect."
	concept AcceptCallAction < AcceptEventAction [
		restricts AcceptCallAction_returnInformation to exactly 1
	]

	@rdfs:label "returnInformation"
	@rdfs:comment "An OutputPin where a value is placed containing sufficient information to perform a subsequent ReplyAction and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model."
	relation AcceptCallAction_returnInformation [
		from AcceptCallAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "AcceptEventAction"
	@rdfs:comment "An AcceptEventAction is an Action that waits for the occurrence of one or more specific Events."
	concept AcceptEventAction < Action [
		restricts AcceptEventAction_isUnmarshall to exactly 1
		restricts AcceptEventAction_trigger to min 1
	]

	@rdfs:label "isUnmarshall"
	@rdfs:comment "Indicates whether there is a single OutputPin for a SignalEvent occurrence, or multiple OutputPins for attribute values of the instance of the Signal associated with a SignalEvent occurrence."
	scalar property AcceptEventAction_isUnmarshall [
		domain AcceptEventAction
		range types:Boolean
		functional
	]

	@rdfs:label "result"
	@rdfs:comment "OutputPins holding the values received from an Event occurrence."
	relation AcceptEventAction_result [
		from AcceptEventAction
		to OutputPin
	] < Action_output

	@rdfs:label "trigger"
	@rdfs:comment "The Triggers specifying the Events of which the AcceptEventAction waits for occurrences."
	relation AcceptEventAction_trigger [
		from AcceptEventAction
		to Trigger
	] < Element_ownedElement

	@rdfs:label "ActionInputPin"
	@rdfs:comment "An ActionInputPin is a kind of InputPin that executes an Action to determine the values to input to another Action."
	concept ActionInputPin < InputPin [
		restricts ActionInputPin_fromAction to exactly 1
	]

	@rdfs:label "fromAction"
	@rdfs:comment "The Action used to provide the values of the ActionInputPin."
	relation ActionInputPin_fromAction [
		from ActionInputPin
		to Action
		functional
	] < Element_ownedElement

	@rdfs:label "AddStructuralFeatureValueAction"
	@rdfs:comment "An AddStructuralFeatureValueAction is a WriteStructuralFeatureAction for adding values to a StructuralFeature."
	concept AddStructuralFeatureValueAction < WriteStructuralFeatureAction [
		restricts AddStructuralFeatureValueAction_isReplaceAll to exactly 1
	]

	@rdfs:label "insertAt"
	@rdfs:comment "The InputPin that gives the position at which to insert the value in an ordered StructuralFeature. The type of the insertAt InputPin is UnlimitedNatural, but the value cannot be zero. It is omitted for unordered StructuralFeatures."
	relation AddStructuralFeatureValueAction_insertAt [
		from AddStructuralFeatureValueAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "isReplaceAll"
	@rdfs:comment "Specifies whether existing values of the StructuralFeature should be removed before adding the new value."
	scalar property AddStructuralFeatureValueAction_isReplaceAll [
		domain AddStructuralFeatureValueAction
		range types:Boolean
		functional
	]

	@rdfs:label "AddVariableValueAction"
	@rdfs:comment "An AddVariableValueAction is a WriteVariableAction for adding values to a Variable."
	concept AddVariableValueAction < WriteVariableAction [
		restricts AddVariableValueAction_isReplaceAll to exactly 1
	]

	@rdfs:label "insertAt"
	@rdfs:comment "The InputPin that gives the position at which to insert a new value or move an existing value in ordered Variables. The type of the insertAt InputPin is UnlimitedNatural, but the value cannot be zero. It is omitted for unordered Variables."
	relation AddVariableValueAction_insertAt [
		from AddVariableValueAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "isReplaceAll"
	@rdfs:comment "Specifies whether existing values of the Variable should be removed before adding the new value."
	scalar property AddVariableValueAction_isReplaceAll [
		domain AddVariableValueAction
		range types:Boolean
		functional
	]

	@rdfs:label "BroadcastSignalAction"
	@rdfs:comment "A BroadcastSignalAction is an InvocationAction that transmits a Signal instance to all the potential target objects in the system. Values from the argument InputPins are used to provide values for the attributes of the Signal. The requestor continues execution immediately after the Signal instances are sent out and cannot receive reply values."
	concept BroadcastSignalAction < InvocationAction [
		restricts BroadcastSignalAction_signal to exactly 1
	]

	@rdfs:label "signal"
	@rdfs:comment "The Signal whose instances are to be sent."
	relation BroadcastSignalAction_signal [
		from BroadcastSignalAction
		to Signal
		functional
	]

	@rdfs:label "InvocationAction"
	@rdfs:comment "InvocationAction is an abstract class for the various actions that request Behavior invocation."
	aspect InvocationAction < Action

	@rdfs:label "argument"
	@rdfs:comment "The InputPins that provide the argument values passed in the invocation request."
	relation InvocationAction_argument [
		from InvocationAction
		to InputPin
	] < Action_input

	@rdfs:label "onPort"
	@rdfs:comment "For CallOperationActions, SendSignalActions, and SendObjectActions, an optional Port of the target object through which the invocation request is sent."
	relation InvocationAction_onPort [
		from InvocationAction
		to Port
		functional
	]

	@rdfs:label "CallAction"
	@rdfs:comment "CallAction is an abstract class for Actions that invoke a Behavior with given argument values and (if the invocation is synchronous) receive reply values."
	aspect CallAction < InvocationAction [
		restricts CallAction_isSynchronous to exactly 1
	]

	@rdfs:label "isSynchronous"
	@rdfs:comment "If true, the call is synchronous and the caller waits for completion of the invoked Behavior. If false, the call is asynchronous and the caller proceeds immediately and cannot receive return values."
	scalar property CallAction_isSynchronous [
		domain CallAction
		range types:Boolean
		functional
	]

	@rdfs:label "result"
	@rdfs:comment "The OutputPins on which the reply values from the invocation are placed (if the call is synchronous)."
	relation CallAction_result [
		from CallAction
		to OutputPin
	] < Action_output

	@rdfs:label "CallBehaviorAction"
	@rdfs:comment "A CallBehaviorAction is a CallAction that invokes a Behavior directly. The argument values of the CallBehaviorAction are passed on the input Parameters of the invoked Behavior. If the call is synchronous, the execution of the CallBehaviorAction waits until the execution of the invoked Behavior completes and the values of output Parameters of the Behavior are placed on the result OutputPins. If the call is asynchronous, the CallBehaviorAction completes immediately and no results values can be provided."
	concept CallBehaviorAction < CallAction [
		restricts CallBehaviorAction_behavior to exactly 1
	]

	@rdfs:label "behavior"
	@rdfs:comment "The Behavior being invoked."
	relation CallBehaviorAction_behavior [
		from CallBehaviorAction
		to Behavior
		functional
	]

	@rdfs:label "CallOperationAction"
	@rdfs:comment "A CallOperationAction is a CallAction that transmits an Operation call request to the target object, where it may cause the invocation of associated Behavior. The argument values of the CallOperationAction are passed on the input Parameters of the Operation. If call is synchronous, the execution of the CallOperationAction waits until the execution of the invoked Operation completes and the values of output Parameters of the Operation are placed on the result OutputPins. If the call is asynchronous, the CallOperationAction completes immediately and no results values can be provided."
	concept CallOperationAction < CallAction [
		restricts CallOperationAction_operation to exactly 1
		restricts CallOperationAction_target to exactly 1
	]

	@rdfs:label "operation"
	@rdfs:comment "The Operation being invoked."
	relation CallOperationAction_operation [
		from CallOperationAction
		to Operation
		functional
	]

	@rdfs:label "target"
	@rdfs:comment "The InputPin that provides the target object to which the Operation call request is sent."
	relation CallOperationAction_target [
		from CallOperationAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "Clause"
	@rdfs:comment "A Clause is an Element that represents a single branch of a ConditionalNode, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates to true."
	concept Clause < Element [
		restricts Clause_decider to exactly 1
		restricts Clause_test to min 1
	]

	@rdfs:label "body"
	@rdfs:comment "The set of ExecutableNodes that are executed if the test evaluates to true and the Clause is chosen over other Clauses within the ConditionalNode that also have tests that evaluate to true."
	relation Clause_body [
		from Clause
		to ExecutableNode
	]

	@rdfs:label "bodyOutput"
	@rdfs:comment "The OutputPins on Actions within the body section whose values are moved to the result OutputPins of the containing ConditionalNode after execution of the body."
	relation Clause_bodyOutput [
		from Clause
		to OutputPin
	]

	@rdfs:label "decider"
	@rdfs:comment "An OutputPin on an Action in the test section whose Boolean value determines the result of the test."
	relation Clause_decider [
		from Clause
		to OutputPin
		functional
	]

	@rdfs:label "predecessorClause"
	@rdfs:comment "A set of Clauses whose tests must all evaluate to false before this Clause can evaluate its test."
	relation Clause_predecessorClause [
		from Clause
		to Clause
		@rdfs:label "successorClause"
		@rdfs:comment "A set of Clauses that may not evaluate their tests unless the test for this Clause evaluates to false."
		reverse Clause_successorClause
	]

	@rdfs:label "test"
	@rdfs:comment "The set of ExecutableNodes that are executed in order to provide a test result for the Clause."
	relation Clause_test [
		from Clause
		to ExecutableNode
	]

	@rdfs:label "ClearAssociationAction"
	@rdfs:comment "A ClearAssociationAction is an Action that destroys all links of an Association in which a particular object participates."
	concept ClearAssociationAction < Action [
		restricts ClearAssociationAction_association to exactly 1
		restricts ClearAssociationAction_object to exactly 1
	]

	@rdfs:label "association"
	@rdfs:comment "The Association to be cleared."
	relation ClearAssociationAction_association [
		from ClearAssociationAction
		to Association
		functional
	]

	@rdfs:label "object"
	@rdfs:comment "The InputPin that gives the object whose participation in the Association is to be cleared."
	relation ClearAssociationAction_object [
		from ClearAssociationAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "ClearStructuralFeatureAction"
	@rdfs:comment "A ClearStructuralFeatureAction is a StructuralFeatureAction that removes all values of a StructuralFeature."
	concept ClearStructuralFeatureAction < StructuralFeatureAction

	@rdfs:label "result"
	@rdfs:comment "The OutputPin on which is put the input object as modified by the ClearStructuralFeatureAction."
	relation ClearStructuralFeatureAction_result [
		from ClearStructuralFeatureAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "ClearVariableAction"
	@rdfs:comment "A ClearVariableAction is a VariableAction that removes all values of a Variable."
	concept ClearVariableAction < VariableAction

	@rdfs:label "ConditionalNode"
	@rdfs:comment "A ConditionalNode is a StructuredActivityNode that chooses one among some number of alternative collections of ExecutableNodes to execute."
	concept ConditionalNode < StructuredActivityNode [
		restricts ConditionalNode_clause to min 1
		restricts ConditionalNode_isAssured to exactly 1
		restricts ConditionalNode_isDeterminate to exactly 1
	]

	@rdfs:label "clause"
	@rdfs:comment "The set of Clauses composing the ConditionalNode."
	relation ConditionalNode_clause [
		from ConditionalNode
		to Clause
	] < Element_ownedElement

	@rdfs:label "isAssured"
	@rdfs:comment "If true, the modeler asserts that the test for at least one Clause of the ConditionalNode will succeed."
	scalar property ConditionalNode_isAssured [
		domain ConditionalNode
		range types:Boolean
		functional
	]

	@rdfs:label "isDeterminate"
	@rdfs:comment "If true, the modeler asserts that the test for at most one Clause of the ConditionalNode will succeed."
	scalar property ConditionalNode_isDeterminate [
		domain ConditionalNode
		range types:Boolean
		functional
	]

	@rdfs:label "result"
	@rdfs:comment "The OutputPins that onto which are moved values from the bodyOutputs of the Clause selected for execution."
	relation ConditionalNode_result [
		from ConditionalNode
		to OutputPin
	] < StructuredActivityNode_structuredNodeOutput

	@rdfs:label "CreateLinkAction"
	@rdfs:comment "A CreateLinkAction is a WriteLinkAction for creating links."
	concept CreateLinkAction < WriteLinkAction

	@rdfs:label "LinkEndCreationData"
	@rdfs:comment "LinkEndCreationData is LinkEndData used to provide values for one end of a link to be created by a CreateLinkAction."
	concept LinkEndCreationData < LinkEndData [
		restricts LinkEndCreationData_isReplaceAll to exactly 1
	]

	@rdfs:label "insertAt"
	@rdfs:comment "For ordered Association ends, the InputPin that provides the position where the new link should be inserted or where an existing link should be moved to. The type of the insertAt InputPin is UnlimitedNatural, but the input cannot be zero. It is omitted for Association ends that are not ordered."
	relation LinkEndCreationData_insertAt [
		from LinkEndCreationData
		to InputPin
		functional
	]

	@rdfs:label "isReplaceAll"
	@rdfs:comment "Specifies whether the existing links emanating from the object on this end should be destroyed before creating a new link."
	scalar property LinkEndCreationData_isReplaceAll [
		domain LinkEndCreationData
		range types:Boolean
		functional
	]

	@rdfs:label "CreateLinkObjectAction"
	@rdfs:comment "A CreateLinkObjectAction is a CreateLinkAction for creating link objects (AssociationClasse instances)."
	concept CreateLinkObjectAction < CreateLinkAction [
		restricts CreateLinkObjectAction_result to exactly 1
	]

	@rdfs:label "result"
	@rdfs:comment "The output pin on which the newly created link object is placed."
	relation CreateLinkObjectAction_result [
		from CreateLinkObjectAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "CreateObjectAction"
	@rdfs:comment "A CreateObjectAction is an Action that creates an instance of the specified Classifier."
	concept CreateObjectAction < Action [
		restricts CreateObjectAction_classifier to exactly 1
		restricts CreateObjectAction_result to exactly 1
	]

	@rdfs:label "classifier"
	@rdfs:comment "The Classifier to be instantiated."
	relation CreateObjectAction_classifier [
		from CreateObjectAction
		to Classifier
		functional
	]

	@rdfs:label "result"
	@rdfs:comment "The OutputPin on which the newly created object is placed."
	relation CreateObjectAction_result [
		from CreateObjectAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "DestroyLinkAction"
	@rdfs:comment "A DestroyLinkAction is a WriteLinkAction that destroys links (including link objects)."
	concept DestroyLinkAction < WriteLinkAction

	@rdfs:label "LinkEndDestructionData"
	@rdfs:comment "LinkEndDestructionData is LinkEndData used to provide values for one end of a link to be destroyed by a DestroyLinkAction."
	concept LinkEndDestructionData < LinkEndData [
		restricts LinkEndDestructionData_isDestroyDuplicates to exactly 1
	]

	@rdfs:label "destroyAt"
	@rdfs:comment "The InputPin that provides the position of an existing link to be destroyed in an ordered, nonunique Association end. The type of the destroyAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited."
	relation LinkEndDestructionData_destroyAt [
		from LinkEndDestructionData
		to InputPin
		functional
	]

	@rdfs:label "isDestroyDuplicates"
	@rdfs:comment "Specifies whether to destroy duplicates of the value in nonunique Association ends."
	scalar property LinkEndDestructionData_isDestroyDuplicates [
		domain LinkEndDestructionData
		range types:Boolean
		functional
	]

	@rdfs:label "DestroyObjectAction"
	@rdfs:comment "A DestroyObjectAction is an Action that destroys objects."
	concept DestroyObjectAction < Action [
		restricts DestroyObjectAction_isDestroyLinks to exactly 1
		restricts DestroyObjectAction_isDestroyOwnedObjects to exactly 1
		restricts DestroyObjectAction_target to exactly 1
	]

	@rdfs:label "isDestroyLinks"
	@rdfs:comment "Specifies whether links in which the object participates are destroyed along with the object."
	scalar property DestroyObjectAction_isDestroyLinks [
		domain DestroyObjectAction
		range types:Boolean
		functional
	]

	@rdfs:label "isDestroyOwnedObjects"
	@rdfs:comment "Specifies whether objects owned by the object (via composition) are destroyed along with the object."
	scalar property DestroyObjectAction_isDestroyOwnedObjects [
		domain DestroyObjectAction
		range types:Boolean
		functional
	]

	@rdfs:label "target"
	@rdfs:comment "The InputPin providing the object to be destroyed."
	relation DestroyObjectAction_target [
		from DestroyObjectAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "ExpansionNode"
	@rdfs:comment "An ExpansionNode is an ObjectNode used to indicate a collection input or output for an ExpansionRegion. A collection input of an ExpansionRegion contains a collection that is broken into its individual elements inside the region, whose content is executed once per element. A collection output of an ExpansionRegion combines individual elements produced by the execution of the region into a collection for use outside the region."
	concept ExpansionNode < ObjectNode

	@rdfs:label "inputElement"
	@rdfs:comment "The ExpansionNodes that hold the input collections for the ExpansionRegion."
	relation ExpansionRegion_inputElement [
		from ExpansionRegion
		to ExpansionNode
		@rdfs:label "regionAsInput"
		@rdfs:comment "The ExpansionRegion for which the ExpansionNode is an input."
		reverse ExpansionNode_regionAsInput
	]

	@rdfs:label "outputElement"
	@rdfs:comment "The ExpansionNodes that form the output collections of the ExpansionRegion."
	relation ExpansionRegion_outputElement [
		from ExpansionRegion
		to ExpansionNode
		@rdfs:label "regionAsOutput"
		@rdfs:comment "The ExpansionRegion for which the ExpansionNode is an output."
		reverse ExpansionNode_regionAsOutput
	]

	@rdfs:label "ExpansionRegion"
	@rdfs:comment "An ExpansionRegion is a StructuredActivityNode that executes its content multiple times corresponding to elements of input collection(s)."
	concept ExpansionRegion < StructuredActivityNode [
		restricts ExpansionRegion_inputElement to min 1
		restricts ExpansionRegion_mode to exactly 1
	]

	@rdfs:label "mode"
	@rdfs:comment "The mode in which the ExpansionRegion executes its contents. If parallel, executions are concurrent. If iterative, executions are sequential. If stream, a stream of values flows into a single execution."
	scalar property ExpansionRegion_mode [
		domain ExpansionRegion
		range ExpansionKind
		functional
	]

	@rdfs:label "LoopNode"
	@rdfs:comment "A LoopNode is a StructuredActivityNode that represents an iterative loop with setup, test, and body sections."
	concept LoopNode < StructuredActivityNode [
		restricts LoopNode_decider to exactly 1
		restricts LoopNode_isTestedFirst to exactly 1
		restricts LoopNode_test to min 1
	]

	@rdfs:label "bodyOutput"
	@rdfs:comment "The OutputPins on Actions within the bodyPart, the values of which are moved to the loopVariable OutputPins after the completion of each execution of the bodyPart, before the next iteration of the loop begins or before the loop exits."
	relation LoopNode_bodyOutput [
		from LoopNode
		to OutputPin
	]

	@rdfs:label "bodyPart"
	@rdfs:comment "The set of ExecutableNodes that perform the repetitive computations of the loop. The bodyPart is executed as long as the test section produces a true value."
	relation LoopNode_bodyPart [
		from LoopNode
		to ExecutableNode
	]

	@rdfs:label "decider"
	@rdfs:comment "An OutputPin on an Action in the test section whose Boolean value determines whether to continue executing the loop bodyPart."
	relation LoopNode_decider [
		from LoopNode
		to OutputPin
		functional
	]

	@rdfs:label "isTestedFirst"
	@rdfs:comment "If true, the test is performed before the first execution of the bodyPart. If false, the bodyPart is executed once before the test is performed."
	scalar property LoopNode_isTestedFirst [
		domain LoopNode
		range types:Boolean
		functional
	]

	@rdfs:label "loopVariable"
	@rdfs:comment "A list of OutputPins that hold the values of the loop variables during an execution of the loop. When the test fails, the values are moved to the result OutputPins of the loop."
	relation LoopNode_loopVariable [
		from LoopNode
		to OutputPin
	] < Element_ownedElement

	@rdfs:label "loopVariableInput"
	@rdfs:comment "A list of InputPins whose values are moved into the loopVariable Pins before the first iteration of the loop."
	relation LoopNode_loopVariableInput [
		from LoopNode
		to InputPin
	] < StructuredActivityNode_structuredNodeInput

	@rdfs:label "result"
	@rdfs:comment "A list of OutputPins that receive the loopVariable values after the last iteration of the loop and constitute the output of the LoopNode."
	relation LoopNode_result [
		from LoopNode
		to OutputPin
	] < StructuredActivityNode_structuredNodeOutput

	@rdfs:label "setupPart"
	@rdfs:comment "The set of ExecutableNodes executed before the first iteration of the loop, in order to initialize values or perform other setup computations."
	relation LoopNode_setupPart [
		from LoopNode
		to ExecutableNode
	]

	@rdfs:label "test"
	@rdfs:comment "The set of ExecutableNodes executed in order to provide the test result for the loop."
	relation LoopNode_test [
		from LoopNode
		to ExecutableNode
	]

	@rdfs:label "OpaqueAction"
	@rdfs:comment "An OpaqueAction is an Action whose functionality is not specified within UML."
	concept OpaqueAction < Action

	@rdfs:label "body"
	@rdfs:comment "Provides a textual specification of the functionality of the Action, in one or more languages other than UML."
	scalar property OpaqueAction_body [
		domain OpaqueAction
		range types:String
	]

	@rdfs:label "inputValue"
	@rdfs:comment "The InputPins providing inputs to the OpaqueAction."
	relation OpaqueAction_inputValue [
		from OpaqueAction
		to InputPin
	] < Action_input

	@rdfs:label "language"
	@rdfs:comment "If provided, a specification of the language used for each of the body Strings."
	scalar property OpaqueAction_language [
		domain OpaqueAction
		range types:String
	]

	@rdfs:label "outputValue"
	@rdfs:comment "The OutputPins on which the OpaqueAction provides outputs."
	relation OpaqueAction_outputValue [
		from OpaqueAction
		to OutputPin
	] < Action_output

	@rdfs:label "RaiseExceptionAction"
	@rdfs:comment "A RaiseExceptionAction is an Action that causes an exception to occur. The input value becomes the exception object."
	concept RaiseExceptionAction < Action [
		restricts RaiseExceptionAction_exception to exactly 1
	]

	@rdfs:label "exception"
	@rdfs:comment "An InputPin whose value becomes the exception object."
	relation RaiseExceptionAction_exception [
		from RaiseExceptionAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "ReadExtentAction"
	@rdfs:comment "A ReadExtentAction is an Action that retrieves the current instances of a Classifier."
	concept ReadExtentAction < Action [
		restricts ReadExtentAction_classifier to exactly 1
		restricts ReadExtentAction_result to exactly 1
	]

	@rdfs:label "classifier"
	@rdfs:comment "The Classifier whose instances are to be retrieved."
	relation ReadExtentAction_classifier [
		from ReadExtentAction
		to Classifier
		functional
	]

	@rdfs:label "result"
	@rdfs:comment "The OutputPin on which the Classifier instances are placed."
	relation ReadExtentAction_result [
		from ReadExtentAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "ReadIsClassifiedObjectAction"
	@rdfs:comment "A ReadIsClassifiedObjectAction is an Action that determines whether an object is classified by a given Classifier."
	concept ReadIsClassifiedObjectAction < Action [
		restricts ReadIsClassifiedObjectAction_classifier to exactly 1
		restricts ReadIsClassifiedObjectAction_isDirect to exactly 1
		restricts ReadIsClassifiedObjectAction_object to exactly 1
		restricts ReadIsClassifiedObjectAction_result to exactly 1
	]

	@rdfs:label "classifier"
	@rdfs:comment "The Classifier against which the classification of the input object is tested."
	relation ReadIsClassifiedObjectAction_classifier [
		from ReadIsClassifiedObjectAction
		to Classifier
		functional
	]

	@rdfs:label "isDirect"
	@rdfs:comment "Indicates whether the input object must be directly classified by the given Classifier or whether it may also be an instance of a specialization of the given Classifier."
	scalar property ReadIsClassifiedObjectAction_isDirect [
		domain ReadIsClassifiedObjectAction
		range types:Boolean
		functional
	]

	@rdfs:label "object"
	@rdfs:comment "The InputPin that holds the object whose classification is to be tested."
	relation ReadIsClassifiedObjectAction_object [
		from ReadIsClassifiedObjectAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "result"
	@rdfs:comment "The OutputPin that holds the Boolean result of the test."
	relation ReadIsClassifiedObjectAction_result [
		from ReadIsClassifiedObjectAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "ReadLinkAction"
	@rdfs:comment "A ReadLinkAction is a LinkAction that navigates across an Association to retrieve the objects on one end."
	concept ReadLinkAction < LinkAction [
		restricts ReadLinkAction_result to exactly 1
	]

	@rdfs:label "result"
	@rdfs:comment 'The OutputPin on which the objects retrieved from the "open" end of those links whose values on other ends are given by the endData.'
	relation ReadLinkAction_result [
		from ReadLinkAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "ReadLinkObjectEndAction"
	@rdfs:comment "A ReadLinkObjectEndAction is an Action that retrieves an end object from a link object."
	concept ReadLinkObjectEndAction < Action [
		restricts ReadLinkObjectEndAction_end to exactly 1
		restricts ReadLinkObjectEndAction_object to exactly 1
		restricts ReadLinkObjectEndAction_result to exactly 1
	]

	@rdfs:label "end"
	@rdfs:comment "The Association end to be read."
	relation ReadLinkObjectEndAction_end [
		from ReadLinkObjectEndAction
		to Property
		functional
	]

	@rdfs:label "object"
	@rdfs:comment "The input pin from which the link object is obtained."
	relation ReadLinkObjectEndAction_object [
		from ReadLinkObjectEndAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "result"
	@rdfs:comment "The OutputPin where the result value is placed."
	relation ReadLinkObjectEndAction_result [
		from ReadLinkObjectEndAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "ReadLinkObjectEndQualifierAction"
	@rdfs:comment "A ReadLinkObjectEndQualifierAction is an Action that retrieves a qualifier end value from a link object."
	concept ReadLinkObjectEndQualifierAction < Action [
		restricts ReadLinkObjectEndQualifierAction_object to exactly 1
		restricts ReadLinkObjectEndQualifierAction_qualifier to exactly 1
		restricts ReadLinkObjectEndQualifierAction_result to exactly 1
	]

	@rdfs:label "object"
	@rdfs:comment "The InputPin from which the link object is obtained."
	relation ReadLinkObjectEndQualifierAction_object [
		from ReadLinkObjectEndQualifierAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "qualifier"
	@rdfs:comment "The qualifier Property to be read."
	relation ReadLinkObjectEndQualifierAction_qualifier [
		from ReadLinkObjectEndQualifierAction
		to Property
		functional
	]

	@rdfs:label "result"
	@rdfs:comment "The OutputPin where the result value is placed."
	relation ReadLinkObjectEndQualifierAction_result [
		from ReadLinkObjectEndQualifierAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "ReadSelfAction"
	@rdfs:comment "A ReadSelfAction is an Action that retrieves the context object of the Behavior execution within which the ReadSelfAction execution is taking place."
	concept ReadSelfAction < Action [
		restricts ReadSelfAction_result to exactly 1
	]

	@rdfs:label "result"
	@rdfs:comment "The OutputPin on which the context object is placed."
	relation ReadSelfAction_result [
		from ReadSelfAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "ReadStructuralFeatureAction"
	@rdfs:comment "A ReadStructuralFeatureAction is a StructuralFeatureAction that retrieves the values of a StructuralFeature."
	concept ReadStructuralFeatureAction < StructuralFeatureAction [
		restricts ReadStructuralFeatureAction_result to exactly 1
	]

	@rdfs:label "result"
	@rdfs:comment "The OutputPin on which the result values are placed."
	relation ReadStructuralFeatureAction_result [
		from ReadStructuralFeatureAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "ReadVariableAction"
	@rdfs:comment "A ReadVariableAction is a VariableAction that retrieves the values of a Variable."
	concept ReadVariableAction < VariableAction [
		restricts ReadVariableAction_result to exactly 1
	]

	@rdfs:label "result"
	@rdfs:comment "The OutputPin on which the result values are placed."
	relation ReadVariableAction_result [
		from ReadVariableAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "ReclassifyObjectAction"
	@rdfs:comment "A ReclassifyObjectAction is an Action that changes the Classifiers that classify an object."
	concept ReclassifyObjectAction < Action [
		restricts ReclassifyObjectAction_isReplaceAll to exactly 1
		restricts ReclassifyObjectAction_object to exactly 1
	]

	@rdfs:label "isReplaceAll"
	@rdfs:comment "Specifies whether existing Classifiers should be removed before adding the new Classifiers."
	scalar property ReclassifyObjectAction_isReplaceAll [
		domain ReclassifyObjectAction
		range types:Boolean
		functional
	]

	@rdfs:label "newClassifier"
	@rdfs:comment "A set of Classifiers to be added to the Classifiers of the given object."
	relation ReclassifyObjectAction_newClassifier [
		from ReclassifyObjectAction
		to Classifier
	]

	@rdfs:label "object"
	@rdfs:comment "The InputPin that holds the object to be reclassified."
	relation ReclassifyObjectAction_object [
		from ReclassifyObjectAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "oldClassifier"
	@rdfs:comment "A set of Classifiers to be removed from the Classifiers of the given object."
	relation ReclassifyObjectAction_oldClassifier [
		from ReclassifyObjectAction
		to Classifier
	]

	@rdfs:label "ReduceAction"
	@rdfs:comment "A ReduceAction is an Action that reduces a collection to a single value by repeatedly combining the elements of the collection using a reducer Behavior."
	concept ReduceAction < Action [
		restricts ReduceAction_collection to exactly 1
		restricts ReduceAction_isOrdered to exactly 1
		restricts ReduceAction_reducer to exactly 1
		restricts ReduceAction_result to exactly 1
	]

	@rdfs:label "collection"
	@rdfs:comment "The InputPin that provides the collection to be reduced."
	relation ReduceAction_collection [
		from ReduceAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "isOrdered"
	@rdfs:comment "Indicates whether the order of the input collection should determine the order in which the reducer Behavior is applied to its elements."
	scalar property ReduceAction_isOrdered [
		domain ReduceAction
		range types:Boolean
		functional
	]

	@rdfs:label "reducer"
	@rdfs:comment "A Behavior that is repreatedly applied to two elements of the input collection to produce a value that is of the same type as elements of the collection."
	relation ReduceAction_reducer [
		from ReduceAction
		to Behavior
		functional
	]

	@rdfs:label "result"
	@rdfs:comment "The output pin on which the result value is placed."
	relation ReduceAction_result [
		from ReduceAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "RemoveStructuralFeatureValueAction"
	@rdfs:comment "A RemoveStructuralFeatureValueAction is a WriteStructuralFeatureAction that removes values from a StructuralFeature."
	concept RemoveStructuralFeatureValueAction < WriteStructuralFeatureAction [
		restricts RemoveStructuralFeatureValueAction_isRemoveDuplicates to exactly 1
	]

	@rdfs:label "isRemoveDuplicates"
	@rdfs:comment "Specifies whether to remove duplicates of the value in nonunique StructuralFeatures."
	scalar property RemoveStructuralFeatureValueAction_isRemoveDuplicates [
		domain RemoveStructuralFeatureValueAction
		range types:Boolean
		functional
	]

	@rdfs:label "removeAt"
	@rdfs:comment "An InputPin that provides the position of an existing value to remove in ordered, nonunique structural features. The type of the removeAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited."
	relation RemoveStructuralFeatureValueAction_removeAt [
		from RemoveStructuralFeatureValueAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "RemoveVariableValueAction"
	@rdfs:comment "A RemoveVariableValueAction is a WriteVariableAction that removes values from a Variables."
	concept RemoveVariableValueAction < WriteVariableAction [
		restricts RemoveVariableValueAction_isRemoveDuplicates to exactly 1
	]

	@rdfs:label "isRemoveDuplicates"
	@rdfs:comment "Specifies whether to remove duplicates of the value in nonunique Variables."
	scalar property RemoveVariableValueAction_isRemoveDuplicates [
		domain RemoveVariableValueAction
		range types:Boolean
		functional
	]

	@rdfs:label "removeAt"
	@rdfs:comment "An InputPin that provides the position of an existing value to remove in ordered, nonunique Variables. The type of the removeAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited."
	relation RemoveVariableValueAction_removeAt [
		from RemoveVariableValueAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "ReplyAction"
	@rdfs:comment "A ReplyAction is an Action that accepts a set of reply values and a value containing return information produced by a previous AcceptCallAction. The ReplyAction returns the values to the caller of the previous call, completing execution of the call."
	concept ReplyAction < Action [
		restricts ReplyAction_replyToCall to exactly 1
		restricts ReplyAction_returnInformation to exactly 1
	]

	@rdfs:label "replyToCall"
	@rdfs:comment "The Trigger specifying the Operation whose call is being replied to."
	relation ReplyAction_replyToCall [
		from ReplyAction
		to Trigger
		functional
	]

	@rdfs:label "replyValue"
	@rdfs:comment "A list of InputPins providing the values for the output (inout, out, and return) Parameters of the Operation. These values are returned to the caller."
	relation ReplyAction_replyValue [
		from ReplyAction
		to InputPin
	] < Action_input

	@rdfs:label "returnInformation"
	@rdfs:comment "An InputPin that holds the return information value produced by an earlier AcceptCallAction."
	relation ReplyAction_returnInformation [
		from ReplyAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "SendObjectAction"
	@rdfs:comment "A SendObjectAction is an InvocationAction that transmits an input object to the target object, which is handled as a request message by the target object. The requestor continues execution immediately after the object is sent out and cannot receive reply values."
	concept SendObjectAction < InvocationAction [
		restricts SendObjectAction_request to exactly 1
		restricts SendObjectAction_target to exactly 1
	]

	@rdfs:label "request"
	@rdfs:comment "The request object, which is transmitted to the target object. The object may be copied in transmission, so identity might not be preserved."
	relation SendObjectAction_request [
		from SendObjectAction
		to InputPin
		functional
	] < InvocationAction_argument

	@rdfs:label "target"
	@rdfs:comment "The target object to which the object is sent."
	relation SendObjectAction_target [
		from SendObjectAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "SendSignalAction"
	@rdfs:comment "A SendSignalAction is an InvocationAction that creates a Signal instance and transmits it to the target object. Values from the argument InputPins are used to provide values for the attributes of the Signal. The requestor continues execution immediately after the Signal instance is sent out and cannot receive reply values."
	concept SendSignalAction < InvocationAction [
		restricts SendSignalAction_signal to exactly 1
		restricts SendSignalAction_target to exactly 1
	]

	@rdfs:label "signal"
	@rdfs:comment "The Signal whose instance is transmitted to the target."
	relation SendSignalAction_signal [
		from SendSignalAction
		to Signal
		functional
	]

	@rdfs:label "target"
	@rdfs:comment "The InputPin that provides the target object to which the Signal instance is sent."
	relation SendSignalAction_target [
		from SendSignalAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "SequenceNode"
	@rdfs:comment "A SequenceNode is a StructuredActivityNode that executes a sequence of ExecutableNodes in order."
	concept SequenceNode < StructuredActivityNode

	@rdfs:label "executableNode"
	@rdfs:comment "The ordered set of ExecutableNodes to be sequenced."
	relation SequenceNode_executableNode [
		from SequenceNode
		to ExecutableNode
	] < StructuredActivityNode_node

	@rdfs:label "StartClassifierBehaviorAction"
	@rdfs:comment "A StartClassifierBehaviorAction is an Action that starts the classifierBehavior of the input object."
	concept StartClassifierBehaviorAction < Action [
		restricts StartClassifierBehaviorAction_object to exactly 1
	]

	@rdfs:label "object"
	@rdfs:comment "The InputPin that holds the object whose classifierBehavior is to be started."
	relation StartClassifierBehaviorAction_object [
		from StartClassifierBehaviorAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "StartObjectBehaviorAction"
	@rdfs:comment "A StartObjectBehaviorAction is an InvocationAction that starts the execution either of a directly instantiated Behavior or of the classifierBehavior of an object. Argument values may be supplied for the input Parameters of the Behavior. If the Behavior is invoked synchronously, then output values may be obtained for output Parameters."
	concept StartObjectBehaviorAction < CallAction [
		restricts StartObjectBehaviorAction_object to exactly 1
	]

	@rdfs:label "object"
	@rdfs:comment "An InputPin that holds the object that is either a Behavior to be started or has a classifierBehavior to be started."
	relation StartObjectBehaviorAction_object [
		from StartObjectBehaviorAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "TestIdentityAction"
	@rdfs:comment "A TestIdentityAction is an Action that tests if two values are identical objects."
	concept TestIdentityAction < Action [
		restricts TestIdentityAction_first to exactly 1
		restricts TestIdentityAction_result to exactly 1
		restricts TestIdentityAction_second to exactly 1
	]

	@rdfs:label "first"
	@rdfs:comment "The InputPin on which the first input object is placed."
	relation TestIdentityAction_first [
		from TestIdentityAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "result"
	@rdfs:comment "The OutputPin whose Boolean value indicates whether the two input objects are identical."
	relation TestIdentityAction_result [
		from TestIdentityAction
		to OutputPin
		functional
	] < Action_output

	@rdfs:label "second"
	@rdfs:comment "The OutputPin on which the second input object is placed."
	relation TestIdentityAction_second [
		from TestIdentityAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "UnmarshallAction"
	@rdfs:comment "An UnmarshallAction is an Action that retrieves the values of the StructuralFeatures of an object and places them on OutputPins."
	concept UnmarshallAction < Action [
		restricts UnmarshallAction_object to exactly 1
		restricts UnmarshallAction_result to min 1
		restricts UnmarshallAction_unmarshallType to exactly 1
	]

	@rdfs:label "object"
	@rdfs:comment "The InputPin that gives the object to be unmarshalled."
	relation UnmarshallAction_object [
		from UnmarshallAction
		to InputPin
		functional
	] < Action_input

	@rdfs:label "result"
	@rdfs:comment "The OutputPins on which are placed the values of the StructuralFeatures of the input object."
	relation UnmarshallAction_result [
		from UnmarshallAction
		to OutputPin
	] < Action_output

	@rdfs:label "unmarshallType"
	@rdfs:comment "The type of the object to be unmarshalled."
	relation UnmarshallAction_unmarshallType [
		from UnmarshallAction
		to Classifier
		functional
	]

	@rdfs:label "ValuePin"
	@rdfs:comment "A ValuePin is an InputPin that provides a value by evaluating a ValueSpecification."
	concept ValuePin < InputPin [
		restricts ValuePin_value to exactly 1
	]

	@rdfs:label "value"
	@rdfs:comment "The ValueSpecification that is evaluated to obtain the value that the ValuePin will provide."
	relation ValuePin_value [
		from ValuePin
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "ActivityFinalNode"
	@rdfs:comment "An ActivityFinalNode is a FinalNode that terminates the execution of its owning Activity or StructuredActivityNode."
	concept ActivityFinalNode < FinalNode

	@rdfs:label "FinalNode"
	@rdfs:comment "A FinalNode is an abstract ControlNode at which a flow in an Activity stops."
	aspect FinalNode < ControlNode

	@rdfs:label "ControlNode"
	@rdfs:comment "A ControlNode is an abstract ActivityNode that coordinates flows in an Activity."
	aspect ControlNode < ActivityNode

	@rdfs:label "ActivityParameterNode"
	@rdfs:comment "An ActivityParameterNode is an ObjectNode for accepting values from the input Parameters or providing values to the output Parameters of an Activity."
	concept ActivityParameterNode < ObjectNode [
		restricts ActivityParameterNode_parameter to exactly 1
	]

	@rdfs:label "parameter"
	@rdfs:comment "The Parameter for which the ActivityParameterNode will be accepting or providing values."
	relation ActivityParameterNode_parameter [
		from ActivityParameterNode
		to Parameter
		functional
	]

	@rdfs:label "CentralBufferNode"
	@rdfs:comment "A CentralBufferNode is an ObjectNode for managing flows from multiple sources and targets."
	concept CentralBufferNode < ObjectNode

	@rdfs:label "ControlFlow"
	@rdfs:comment "A ControlFlow is an ActivityEdge traversed by control tokens or object tokens of control type, which are use to control the execution of ExecutableNodes."
	concept ControlFlow < ActivityEdge

	@rdfs:label "DataStoreNode"
	@rdfs:comment "A DataStoreNode is a CentralBufferNode for persistent data."
	concept DataStoreNode < CentralBufferNode

	@rdfs:label "DecisionNode"
	@rdfs:comment "A DecisionNode is a ControlNode that chooses between outgoing ActivityEdges for the routing of tokens."
	concept DecisionNode < ControlNode

	@rdfs:label "decisionInput"
	@rdfs:comment "A Behavior that is executed to provide an input to guard ValueSpecifications on ActivityEdges outgoing from the DecisionNode."
	relation DecisionNode_decisionInput [
		from DecisionNode
		to Behavior
		functional
	]

	@rdfs:label "decisionInputFlow"
	@rdfs:comment "An additional ActivityEdge incoming to the DecisionNode that provides a decision input value for the guards ValueSpecifications on ActivityEdges outgoing from the DecisionNode."
	relation DecisionNode_decisionInputFlow [
		from DecisionNode
		to ObjectFlow
		functional
	]

	@rdfs:label "ObjectFlow"
	@rdfs:comment "An ObjectFlow is an ActivityEdge that is traversed by object tokens that may hold values. Object flows also support multicast/receive, token selection from object nodes, and transformation of tokens."
	concept ObjectFlow < ActivityEdge [
		restricts ObjectFlow_isMulticast to exactly 1
		restricts ObjectFlow_isMultireceive to exactly 1
	]

	@rdfs:label "isMulticast"
	@rdfs:comment "Indicates whether the objects in the ObjectFlow are passed by multicasting."
	scalar property ObjectFlow_isMulticast [
		domain ObjectFlow
		range types:Boolean
		functional
	]

	@rdfs:label "isMultireceive"
	@rdfs:comment "Indicates whether the objects in the ObjectFlow are gathered from respondents to multicasting."
	scalar property ObjectFlow_isMultireceive [
		domain ObjectFlow
		range types:Boolean
		functional
	]

	@rdfs:label "selection"
	@rdfs:comment "A Behavior used to select tokens from a source ObjectNode."
	relation ObjectFlow_selection [
		from ObjectFlow
		to Behavior
		functional
	]

	@rdfs:label "transformation"
	@rdfs:comment "A Behavior used to change or replace object tokens flowing along the ObjectFlow."
	relation ObjectFlow_transformation [
		from ObjectFlow
		to Behavior
		functional
	]

	@rdfs:label "FlowFinalNode"
	@rdfs:comment "A FlowFinalNode is a FinalNode that terminates a flow by consuming the tokens offered to it."
	concept FlowFinalNode < FinalNode

	@rdfs:label "ForkNode"
	@rdfs:comment "A ForkNode is a ControlNode that splits a flow into multiple concurrent flows."
	concept ForkNode < ControlNode

	@rdfs:label "InitialNode"
	@rdfs:comment "An InitialNode is a ControlNode that offers a single control token when initially enabled."
	concept InitialNode < ControlNode

	@rdfs:label "JoinNode"
	@rdfs:comment "A JoinNode is a ControlNode that synchronizes multiple flows."
	concept JoinNode < ControlNode [
		restricts JoinNode_isCombineDuplicate to exactly 1
	]

	@rdfs:label "isCombineDuplicate"
	@rdfs:comment "Indicates whether incoming tokens having objects with the same identity are combined into one by the JoinNode."
	scalar property JoinNode_isCombineDuplicate [
		domain JoinNode
		range types:Boolean
		functional
	]

	@rdfs:label "joinSpec"
	@rdfs:comment 'A ValueSpecification giving the condition under which the JoinNode will offer a token on its outgoing ActivityEdge. If no joinSpec is specified, then the JoinNode will offer an outgoing token if tokens are offered on all of its incoming ActivityEdges (an "and" condition).'
	relation JoinNode_joinSpec [
		from JoinNode
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "MergeNode"
	@rdfs:comment "A merge node is a control node that brings together multiple alternate flows. It is not used to synchronize concurrent flows but to accept one among several alternate flows."
	concept MergeNode < ControlNode

	@rdfs:label "InstanceValue"
	@rdfs:comment "An InstanceValue is a ValueSpecification that identifies an instance."
	concept InstanceValue < ValueSpecification [
		restricts InstanceValue_instance to exactly 1
	]

	@rdfs:label "instance"
	@rdfs:comment "The InstanceSpecification that represents the specified value."
	relation InstanceValue_instance [
		from InstanceValue
		to InstanceSpecification
		functional
	]

	@rdfs:label "AnyReceiveEvent"
	@rdfs:comment "A trigger for an AnyReceiveEvent is triggered by the receipt of any message that is not explicitly handled by any related trigger."
	concept AnyReceiveEvent < MessageEvent

	@rdfs:label "MessageEvent"
	@rdfs:comment "A MessageEvent specifies the receipt by an object of either an Operation call or a Signal instance."
	aspect MessageEvent < Event

	@rdfs:label "CallEvent"
	@rdfs:comment "A CallEvent models the receipt by an object of a message invoking a call of an Operation."
	concept CallEvent < MessageEvent [
		restricts CallEvent_operation to exactly 1
	]

	@rdfs:label "operation"
	@rdfs:comment "Designates the Operation whose invocation raised the CalEvent."
	relation CallEvent_operation [
		from CallEvent
		to Operation
		functional
	]

	@rdfs:label "ChangeEvent"
	@rdfs:comment "A ChangeEvent models a change in the system configuration that makes a condition true."
	concept ChangeEvent < Event [
		restricts ChangeEvent_changeExpression to exactly 1
	]

	@rdfs:label "changeExpression"
	@rdfs:comment "A Boolean-valued ValueSpecification that will result in a ChangeEvent whenever its value changes from false to true."
	relation ChangeEvent_changeExpression [
		from ChangeEvent
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "FunctionBehavior"
	@rdfs:comment "A FunctionBehavior is an OpaqueBehavior that does not access or modify any objects or other external data."
	concept FunctionBehavior < OpaqueBehavior

	@rdfs:label "OpaqueBehavior"
	@rdfs:comment "An OpaqueBehavior is a Behavior whose specification is given in a textual language other than UML."
	concept OpaqueBehavior < Behavior

	@rdfs:label "body"
	@rdfs:comment "Specifies the behavior in one or more languages."
	scalar property OpaqueBehavior_body [
		domain OpaqueBehavior
		range types:String
	]

	@rdfs:label "language"
	@rdfs:comment "Languages the body strings use in the same order as the body strings."
	scalar property OpaqueBehavior_language [
		domain OpaqueBehavior
		range types:String
	]

	@rdfs:label "SignalEvent"
	@rdfs:comment "A SignalEvent represents the receipt of an asynchronous Signal instance."
	concept SignalEvent < MessageEvent [
		restricts SignalEvent_signal to exactly 1
	]

	@rdfs:label "signal"
	@rdfs:comment "The specific Signal that is associated with this SignalEvent."
	relation SignalEvent_signal [
		from SignalEvent
		to Signal
		functional
	]

	@rdfs:label "TimeEvent"
	@rdfs:comment "A TimeEvent is an Event that occurs at a specific point in time."
	concept TimeEvent < Event [
		restricts TimeEvent_isRelative to exactly 1
		restricts TimeEvent_when to exactly 1
	]

	@rdfs:label "isRelative"
	@rdfs:comment "Specifies whether the TimeEvent is specified as an absolute or relative time."
	scalar property TimeEvent_isRelative [
		domain TimeEvent
		range types:Boolean
		functional
	]

	@rdfs:label "when"
	@rdfs:comment "Specifies the time of the TimeEvent."
	relation TimeEvent_when [
		from TimeEvent
		to TimeExpression
		functional
	] < Element_ownedElement

	@rdfs:label "TimeExpression"
	@rdfs:comment "A TimeExpression is a ValueSpecification that represents a time value."
	concept TimeExpression < ValueSpecification

	@rdfs:label "expr"
	@rdfs:comment "A ValueSpecification that evaluates to the value of the TimeExpression."
	relation TimeExpression_expr [
		from TimeExpression
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "observation"
	@rdfs:comment "Refers to the Observations that are involved in the computation of the TimeExpression value."
	relation TimeExpression_observation [
		from TimeExpression
		to Observation
	]

	@rdfs:label "Observation"
	@rdfs:comment "Observation specifies a value determined by observing an event or events that occur relative to other model Elements."
	aspect Observation < PackageableElement

	@rdfs:label "CommunicationPath"
	@rdfs:comment "A communication path is an association between two deployment targets, through which they are able to exchange signals and messages."
	concept CommunicationPath < Association

	@rdfs:label "Device"
	@rdfs:comment "A device is a physical computational resource with processing capability upon which artifacts may be deployed for execution. Devices may be complex (i.e., they may consist of other devices)."
	concept Device < Node

	@rdfs:label "Node"
	@rdfs:comment "A Node is computational resource upon which artifacts may be deployed for execution. Nodes can be interconnected through communication paths to define network structures."
	concept Node < Class, DeploymentTarget

	@rdfs:label "nestedNode"
	@rdfs:comment "The Nodes that are defined (nested) within the Node."
	relation Node_nestedNode [
		from Node
		to Node
	] < Namespace_ownedMember

	@rdfs:label "ExecutionEnvironment"
	@rdfs:comment "An execution environment is a node that offers an execution environment for specific types of components that are deployed on it in the form of executable artifacts."
	concept ExecutionEnvironment < Node

	@rdfs:label "InformationFlow"
	@rdfs:comment "InformationFlows describe circulation of information through a system in a general manner. They do not specify the nature of the information, mechanisms by which it is conveyed, sequences of exchange or any control conditions. During more detailed modeling, representation and realization links may be added to specify which model elements implement an InformationFlow and to show how information is conveyed.  InformationFlows require some kind of “information channel” for unidirectional transmission of information items from sources to targets.  They specify the information channel’s realizations, if any, and identify the information that flows along them.  Information moving along the information channel may be represented by abstract InformationItems and by concrete Classifiers."
	concept InformationFlow < PackageableElement, DirectedRelationship [
		restricts InformationFlow_conveyed to min 1
	]

	@rdfs:label "conveyed"
	@rdfs:comment "Specifies the information items that may circulate on this information flow."
	relation InformationFlow_conveyed [
		from InformationFlow
		to Classifier
	]

	@rdfs:label "informationSource"
	@rdfs:comment "Defines from which source the conveyed InformationItems are initiated."
	relation InformationFlow_informationSource [
		from InformationFlow
		to NamedElement
		functional
	] < DirectedRelationship_source

	@rdfs:label "informationTarget"
	@rdfs:comment "Defines to which target the conveyed InformationItems are directed."
	relation InformationFlow_informationTarget [
		from InformationFlow
		to NamedElement
		functional
	] < DirectedRelationship_target

	@rdfs:label "realization"
	@rdfs:comment "Determines which Relationship will realize the specified flow."
	relation InformationFlow_realization [
		from InformationFlow
		to Relationship
	]

	@rdfs:label "realizingActivityEdge"
	@rdfs:comment "Determines which ActivityEdges will realize the specified flow."
	relation InformationFlow_realizingActivityEdge [
		from InformationFlow
		to ActivityEdge
	]

	@rdfs:label "realizingConnector"
	@rdfs:comment "Determines which Connectors will realize the specified flow."
	relation InformationFlow_realizingConnector [
		from InformationFlow
		to Connector
	]

	@rdfs:label "realizingMessage"
	@rdfs:comment "Determines which Messages will realize the specified flow."
	relation InformationFlow_realizingMessage [
		from InformationFlow
		to Message
	]

	@rdfs:label "Message"
	@rdfs:comment "A Message defines a particular communication between Lifelines of an Interaction."
	concept Message < NamedElement [
		restricts Message_interaction to exactly 1
		restricts Message_messageKind to exactly 1
		restricts Message_messageSort to exactly 1
	]

	@rdfs:label "argument"
	@rdfs:comment "The arguments of the Message."
	relation Message_argument [
		from Message
		to ValueSpecification
	] < Element_ownedElement

	@rdfs:label "connector"
	@rdfs:comment "The Connector on which this Message is sent."
	relation Message_connector [
		from Message
		to Connector
		functional
	]

	@rdfs:label "message"
	@rdfs:comment "The Messages contained in this Interaction."
	relation Interaction_message [
		from Interaction
		to Message
		@rdfs:label "interaction"
		@rdfs:comment "The enclosing Interaction owning the Message."
		reverse Message_interaction
		inverse functional
	] < Namespace_ownedMember

	@rdfs:label "messageKind"
	@rdfs:comment "The derived kind of the Message (complete, lost, found, or unknown)."
	scalar property Message_messageKind [
		domain Message
		range MessageKind
		functional
	]

	@rdfs:label "messageSort"
	@rdfs:comment "The sort of communication reflected by the Message."
	scalar property Message_messageSort [
		domain Message
		range MessageSort
		functional
	]

	@rdfs:label "receiveEvent"
	@rdfs:comment "References the Receiving of the Message."
	relation Message_receiveEvent [
		from Message
		to MessageEnd
		functional
	]

	@rdfs:label "sendEvent"
	@rdfs:comment "References the Sending of the Message."
	relation Message_sendEvent [
		from Message
		to MessageEnd
		functional
	]

	@rdfs:label "signature"
	@rdfs:comment "The signature of the Message is the specification of its content. It refers either an Operation or a Signal."
	relation Message_signature [
		from Message
		to NamedElement
		functional
	]

	@rdfs:label "Interaction"
	@rdfs:comment "An Interaction is a unit of Behavior that focuses on the observable exchange of information between connectable elements."
	concept Interaction < Behavior, InteractionFragment

	@rdfs:label "lifeline"
	@rdfs:comment "Specifies the participants in this Interaction."
	relation Interaction_lifeline [
		from Interaction
		to Lifeline
		@rdfs:label "interaction"
		@rdfs:comment "References the Interaction enclosing this Lifeline."
		reverse Lifeline_interaction
		inverse functional
	] < Namespace_ownedMember

	@rdfs:label "fragment"
	@rdfs:comment "The ordered set of fragments in the Interaction."
	relation Interaction_fragment [
		from Interaction
		to InteractionFragment
		@rdfs:label "enclosingInteraction"
		@rdfs:comment "The Interaction enclosing this InteractionFragment."
		reverse InteractionFragment_enclosingInteraction
	] < Namespace_ownedMember

	@rdfs:label "action"
	@rdfs:comment "Actions owned by the Interaction."
	relation Interaction_action [
		from Interaction
		to Action
	] < Element_ownedElement

	@rdfs:label "formalGate"
	@rdfs:comment "Specifies the gates that form the message interface between this Interaction and any InteractionUses which reference it."
	relation Interaction_formalGate [
		from Interaction
		to Gate
	] < Namespace_ownedMember

	@rdfs:label "InteractionFragment"
	@rdfs:comment "InteractionFragment is an abstract notion of the most general interaction unit. An InteractionFragment is a piece of an Interaction. Each InteractionFragment is conceptually like an Interaction by itself."
	aspect InteractionFragment < NamedElement

	@rdfs:label "covered"
	@rdfs:comment "References the Lifelines that the InteractionFragment involves."
	relation InteractionFragment_covered [
		from InteractionFragment
		to Lifeline
		@rdfs:label "coveredBy"
		@rdfs:comment "References the InteractionFragments in which this Lifeline takes part."
		reverse Lifeline_coveredBy
	]

	@rdfs:label "fragment"
	@rdfs:comment "The fragments of the operand."
	relation InteractionOperand_fragment [
		from InteractionOperand
		to InteractionFragment
		@rdfs:label "enclosingOperand"
		@rdfs:comment "The operand enclosing this InteractionFragment (they may nest recursively)."
		reverse InteractionFragment_enclosingOperand
	] < Namespace_ownedMember

	@rdfs:label "generalOrdering"
	@rdfs:comment "The general ordering relationships contained in this fragment."
	relation InteractionFragment_generalOrdering [
		from InteractionFragment
		to GeneralOrdering
	] < Element_ownedElement

	@rdfs:label "Lifeline"
	@rdfs:comment "A Lifeline represents an individual participant in the Interaction. While parts and structural features may have multiplicity greater than 1, Lifelines represent only one interacting entity."
	concept Lifeline < NamedElement [
		restricts Lifeline_interaction to exactly 1
	]

	@rdfs:label "decomposedAs"
	@rdfs:comment "References the Interaction that represents the decomposition."
	relation Lifeline_decomposedAs [
		from Lifeline
		to PartDecomposition
		functional
	]

	@rdfs:label "represents"
	@rdfs:comment "References the ConnectableElement within the classifier that contains the enclosing interaction."
	relation Lifeline_represents [
		from Lifeline
		to ConnectableElement
		functional
	]

	@rdfs:label "selector"
	@rdfs:comment "If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set."
	relation Lifeline_selector [
		from Lifeline
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "PartDecomposition"
	@rdfs:comment "A PartDecomposition is a description of the internal Interactions of one Lifeline relative to an Interaction."
	concept PartDecomposition < InteractionUse

	@rdfs:label "InteractionUse"
	@rdfs:comment "An InteractionUse refers to an Interaction. The InteractionUse is a shorthand for copying the contents of the referenced Interaction where the InteractionUse is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal Gates with the actual ones."
	concept InteractionUse < InteractionFragment [
		restricts InteractionUse_refersTo to exactly 1
	]

	@rdfs:label "actualGate"
	@rdfs:comment "The actual gates of the InteractionUse."
	relation InteractionUse_actualGate [
		from InteractionUse
		to Gate
	] < Element_ownedElement

	@rdfs:label "argument"
	@rdfs:comment "The actual arguments of the Interaction."
	relation InteractionUse_argument [
		from InteractionUse
		to ValueSpecification
	] < Element_ownedElement

	@rdfs:label "refersTo"
	@rdfs:comment "Refers to the Interaction that defines its meaning."
	relation InteractionUse_refersTo [
		from InteractionUse
		to Interaction
		functional
	]

	@rdfs:label "returnValue"
	@rdfs:comment "The value of the executed Interaction."
	relation InteractionUse_returnValue [
		from InteractionUse
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "returnValueRecipient"
	@rdfs:comment "The recipient of the return value."
	relation InteractionUse_returnValueRecipient [
		from InteractionUse
		to Property
		functional
	]

	@rdfs:label "Gate"
	@rdfs:comment "A Gate is a MessageEnd which serves as a connection point for relating a Message which has a MessageEnd (sendEvent / receiveEvent) outside an InteractionFragment with another Message which has a MessageEnd (receiveEvent / sendEvent)  inside that InteractionFragment."
	concept Gate < MessageEnd

	@rdfs:label "MessageEnd"
	@rdfs:comment "MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a Message."
	aspect MessageEnd < NamedElement

	@rdfs:label "message"
	@rdfs:comment "References a Message."
	relation MessageEnd_message [
		from MessageEnd
		to Message
		functional
	]

	@rdfs:label "InteractionOperand"
	@rdfs:comment "An InteractionOperand is contained in a CombinedFragment. An InteractionOperand represents one operand of the expression given by the enclosing CombinedFragment."
	concept InteractionOperand < Namespace, InteractionFragment

	@rdfs:label "guard"
	@rdfs:comment "Constraint of the operand."
	relation InteractionOperand_guard [
		from InteractionOperand
		to InteractionConstraint
		functional
	] < Element_ownedElement

	@rdfs:label "InteractionConstraint"
	@rdfs:comment "An InteractionConstraint is a Boolean expression that guards an operand in a CombinedFragment."
	concept InteractionConstraint < Constraint

	@rdfs:label "maxint"
	@rdfs:comment "The maximum number of iterations of a loop"
	relation InteractionConstraint_maxint [
		from InteractionConstraint
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "minint"
	@rdfs:comment "The minimum number of iterations of a loop"
	relation InteractionConstraint_minint [
		from InteractionConstraint
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "GeneralOrdering"
	@rdfs:comment "A GeneralOrdering represents a binary relation between two OccurrenceSpecifications, to describe that one OccurrenceSpecification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of OccurrenceSpecifications that may otherwise not have a specified order."
	concept GeneralOrdering < NamedElement [
		restricts GeneralOrdering_after to exactly 1
		restricts GeneralOrdering_before to exactly 1
	]

	@rdfs:label "toBefore"
	@rdfs:comment "References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification."
	relation OccurrenceSpecification_toBefore [
		from OccurrenceSpecification
		to GeneralOrdering
		@rdfs:label "after"
		@rdfs:comment "The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before."
		reverse GeneralOrdering_after
		inverse functional
	]

	@rdfs:label "toAfter"
	@rdfs:comment "References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification."
	relation OccurrenceSpecification_toAfter [
		from OccurrenceSpecification
		to GeneralOrdering
		@rdfs:label "before"
		@rdfs:comment "The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after."
		reverse GeneralOrdering_before
		inverse functional
	]

	@rdfs:label "OccurrenceSpecification"
	@rdfs:comment "An OccurrenceSpecification is the basic semantic unit of Interactions. The sequences of occurrences specified by them are the meanings of Interactions."
	concept OccurrenceSpecification < InteractionFragment

	@rdfs:label "MessageKind"
	@rdfs:comment "This is an enumerated type that identifies the type of Message."
	scalar MessageKind [
		oneOf "complete", "lost", "found", "unknown"
	]

	@rdfs:label "MessageSort"
	@rdfs:comment "This is an enumerated type that identifies the type of communication action that was used to generate the Message."
	scalar MessageSort [
		oneOf "synchCall", "asynchCall", "asynchSignal", "createMessage", "deleteMessage", "reply"
	]

	@rdfs:label "InformationItem"
	@rdfs:comment "InformationItems represent many kinds of information that can flow from sources to targets in very abstract ways.  They represent the kinds of information that may move within a system, but do not elaborate details of the transferred information.  Details of transferred information are the province of other Classifiers that may ultimately define InformationItems.  Consequently, InformationItems cannot be instantiated and do not themselves have features, generalizations, or associations. An important use of InformationItems is to represent information during early design stages, possibly before the detailed modeling decisions that will ultimately define them have been made. Another purpose of InformationItems is to abstract portions of complex models in less precise, but perhaps more general and communicable, ways."
	concept InformationItem < Classifier

	@rdfs:label "represented"
	@rdfs:comment "Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers."
	relation InformationItem_represented [
		from InformationItem
		to Classifier
	]

	@rdfs:label "ActionExecutionSpecification"
	@rdfs:comment "An ActionExecutionSpecification is a kind of ExecutionSpecification representing the execution of an Action."
	concept ActionExecutionSpecification < ExecutionSpecification [
		restricts ActionExecutionSpecification_action to exactly 1
	]

	@rdfs:label "action"
	@rdfs:comment "Action whose execution is occurring."
	relation ActionExecutionSpecification_action [
		from ActionExecutionSpecification
		to Action
		functional
	]

	@rdfs:label "ExecutionSpecification"
	@rdfs:comment "An ExecutionSpecification is a specification of the execution of a unit of Behavior or Action within the Lifeline. The duration of an ExecutionSpecification is represented by two OccurrenceSpecifications, the start OccurrenceSpecification and the finish OccurrenceSpecification."
	aspect ExecutionSpecification < InteractionFragment [
		restricts ExecutionSpecification_finish to exactly 1
		restricts ExecutionSpecification_start to exactly 1
	]

	@rdfs:label "finish"
	@rdfs:comment "References the OccurrenceSpecification that designates the finish of the Action or Behavior."
	relation ExecutionSpecification_finish [
		from ExecutionSpecification
		to OccurrenceSpecification
		functional
	]

	@rdfs:label "start"
	@rdfs:comment "References the OccurrenceSpecification that designates the start of the Action or Behavior."
	relation ExecutionSpecification_start [
		from ExecutionSpecification
		to OccurrenceSpecification
		functional
	]

	@rdfs:label "BehaviorExecutionSpecification"
	@rdfs:comment "A BehaviorExecutionSpecification is a kind of ExecutionSpecification representing the execution of a Behavior."
	concept BehaviorExecutionSpecification < ExecutionSpecification

	@rdfs:label "behavior"
	@rdfs:comment "Behavior whose execution is occurring."
	relation BehaviorExecutionSpecification_behavior [
		from BehaviorExecutionSpecification
		to Behavior
		functional
	]

	@rdfs:label "CombinedFragment"
	@rdfs:comment "A CombinedFragment defines an expression of InteractionFragments. A CombinedFragment is defined by an interaction operator and corresponding InteractionOperands. Through the use of CombinedFragments the user will be able to describe a number of traces in a compact and concise manner."
	concept CombinedFragment < InteractionFragment [
		restricts CombinedFragment_interactionOperator to exactly 1
		restricts CombinedFragment_operand to min 1
	]

	@rdfs:label "cfragmentGate"
	@rdfs:comment "Specifies the gates that form the interface between this CombinedFragment and its surroundings"
	relation CombinedFragment_cfragmentGate [
		from CombinedFragment
		to Gate
	] < Element_ownedElement

	@rdfs:label "interactionOperator"
	@rdfs:comment "Specifies the operation which defines the semantics of this combination of InteractionFragments."
	scalar property CombinedFragment_interactionOperator [
		domain CombinedFragment
		range InteractionOperatorKind
		functional
	]

	@rdfs:label "operand"
	@rdfs:comment "The set of operands of the combined fragment."
	relation CombinedFragment_operand [
		from CombinedFragment
		to InteractionOperand
	] < Element_ownedElement

	@rdfs:label "InteractionOperatorKind"
	@rdfs:comment "InteractionOperatorKind is an enumeration designating the different kinds of operators of CombinedFragments. The InteractionOperand defines the type of operator of a CombinedFragment."
	scalar InteractionOperatorKind [
		oneOf "seq", "alt", "opt", "break", "par", "strict", "loop", "critical", "neg", "assert", "ignore", "consider"
	]

	@rdfs:label "ConsiderIgnoreFragment"
	@rdfs:comment "A ConsiderIgnoreFragment is a kind of CombinedFragment that is used for the consider and ignore cases, which require lists of pertinent Messages to be specified."
	concept ConsiderIgnoreFragment < CombinedFragment

	@rdfs:label "message"
	@rdfs:comment "The set of messages that apply to this fragment."
	relation ConsiderIgnoreFragment_message [
		from ConsiderIgnoreFragment
		to NamedElement
	]

	@rdfs:label "Continuation"
	@rdfs:comment "A Continuation is a syntactic way to define continuations of different branches of an alternative CombinedFragment. Continuations are intuitively similar to labels representing intermediate points in a flow of control."
	concept Continuation < InteractionFragment [
		restricts Continuation_setting to exactly 1
	]

	@rdfs:label "setting"
	@rdfs:comment "True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning."
	scalar property Continuation_setting [
		domain Continuation
		range types:Boolean
		functional
	]

	@rdfs:label "DestructionOccurrenceSpecification"
	@rdfs:comment "A DestructionOccurenceSpecification models the destruction of an object."
	concept DestructionOccurrenceSpecification < MessageOccurrenceSpecification

	@rdfs:label "MessageOccurrenceSpecification"
	@rdfs:comment "A MessageOccurrenceSpecification specifies the occurrence of Message events, such as sending and receiving of Signals or invoking or receiving of Operation calls. A MessageOccurrenceSpecification is a kind of MessageEnd. Messages are generated either by synchronous Operation calls or asynchronous Signal sends. They are received by the execution of corresponding AcceptEventActions."
	concept MessageOccurrenceSpecification < OccurrenceSpecification, MessageEnd

	@rdfs:label "ExecutionOccurrenceSpecification"
	@rdfs:comment "An ExecutionOccurrenceSpecification represents moments in time at which Actions or Behaviors start or finish."
	concept ExecutionOccurrenceSpecification < OccurrenceSpecification [
		restricts ExecutionOccurrenceSpecification_execution to exactly 1
	]

	@rdfs:label "execution"
	@rdfs:comment "References the execution specification describing the execution that is started or finished at this execution event."
	relation ExecutionOccurrenceSpecification_execution [
		from ExecutionOccurrenceSpecification
		to ExecutionSpecification
		functional
	]

	@rdfs:label "StateInvariant"
	@rdfs:comment "A StateInvariant is a runtime constraint on the participants of the Interaction. It may be used to specify a variety of different kinds of Constraints, such as values of Attributes or Variables, internal or external States, and so on. A StateInvariant is an InteractionFragment and it is placed on a Lifeline."
	concept StateInvariant < InteractionFragment [
		restricts StateInvariant_invariant to exactly 1
	]

	@rdfs:label "invariant"
	@rdfs:comment "A Constraint that should hold at runtime for this StateInvariant."
	relation StateInvariant_invariant [
		from StateInvariant
		to Constraint
		functional
	] < Element_ownedElement

	@rdfs:label "FinalState"
	@rdfs:comment "A special kind of State, which, when entered, signifies that the enclosing Region has completed. If the enclosing Region is directly contained in a StateMachine and all other Regions in that StateMachine also are completed, then it means that the entire StateMachine behavior is completed."
	concept FinalState < State

	@rdfs:label "ProtocolTransition"
	@rdfs:comment "A ProtocolTransition specifies a legal Transition for an Operation. Transitions of ProtocolStateMachines have the following information: a pre-condition (guard), a Trigger, and a post-condition. Every ProtocolTransition is associated with at most one BehavioralFeature belonging to the context Classifier of the ProtocolStateMachine."
	concept ProtocolTransition < Transition

	@rdfs:label "postCondition"
	@rdfs:comment "Specifies the post condition of the Transition which is the Condition that should be obtained once the Transition is triggered. This post condition is part of the post condition of the Operation connected to the Transition."
	relation ProtocolTransition_postCondition [
		from ProtocolTransition
		to Constraint
		functional
	] < Namespace_ownedRule

	@rdfs:label "preCondition"
	@rdfs:comment "Specifies the precondition of the Transition. It specifies the Condition that should be verified before triggering the Transition. This guard condition added to the source State will be evaluated as part of the precondition of the Operation referred by the Transition if any."
	relation ProtocolTransition_preCondition [
		from ProtocolTransition
		to Constraint
		functional
	] < Transition_guard

	@rdfs:label "referred"
	@rdfs:comment "This association refers to the associated Operation. It is derived from the Operation of the CallEvent Trigger when applicable."
	relation ProtocolTransition_referred [
		from ProtocolTransition
		to Operation
	]

	@rdfs:label "AssociationClass"
	@rdfs:comment "A model element that has both Association and Class properties. An AssociationClass can be seen as an Association that also has Class properties, or as a Class that also has Association properties. It not only connects a set of Classifiers but also defines a set of Features that belong to the Association itself and not to any of the associated Classifiers."
	concept AssociationClass < Class, Association

	@rdfs:label "Component"
	@rdfs:comment "A Component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment."
	concept Component < Class [
		restricts Component_isIndirectlyInstantiated to exactly 1
	]

	@rdfs:label "isIndirectlyInstantiated"
	@rdfs:comment "If true, the Component is defined at design-time, but at run-time (or execution-time) an object specified by the Component does not exist, that is, the Component is instantiated indirectly, through the instantiation of its realizing Classifiers or parts."
	scalar property Component_isIndirectlyInstantiated [
		domain Component
		range types:Boolean
		functional
	]

	@rdfs:label "packagedElement"
	@rdfs:comment "The set of PackageableElements that a Component owns. In the namespace of a Component, all model elements that are involved in or related to its definition may be owned or imported explicitly. These may include e.g., Classes, Interfaces, Components, Packages, UseCases, Dependencies (e.g., mappings), and Artifacts."
	relation Component_packagedElement [
		from Component
		to PackageableElement
	] < Namespace_ownedMember

	@rdfs:label "provided"
	@rdfs:comment "The Interfaces that the Component exposes to its environment. These Interfaces may be Realized by the Component or any of its realizingClassifiers, or they may be the Interfaces that are provided by its public Ports."
	relation Component_provided [
		from Component
		to Interface
	]

	@rdfs:label "realization"
	@rdfs:comment "The set of Realizations owned by the Component. Realizations reference the Classifiers of which the Component is an abstraction; i.e., that realize its behavior."
	relation Component_realization [
		from Component
		to ComponentRealization
		@rdfs:label "abstraction"
		@rdfs:comment "The Component that owns this ComponentRealization and which is implemented by its realizing Classifiers."
		reverse ComponentRealization_abstraction
	] < Element_ownedElement

	@rdfs:label "required"
	@rdfs:comment "The Interfaces that the Component requires from other Components in its environment in order to be able to offer its full set of provided functionality. These Interfaces may be used by the Component or any of its realizingClassifiers, or they may be the Interfaces that are required by its public Ports."
	relation Component_required [
		from Component
		to Interface
	]

	@rdfs:label "ComponentRealization"
	@rdfs:comment "Realization is specialized to (optionally) define the Classifiers that realize the contract offered by a Component in terms of its provided and required Interfaces. The Component forms an abstraction from these various Classifiers."
	concept ComponentRealization < Realization

	@rdfs:label "realizingClassifier"
	@rdfs:comment "The Classifiers that are involved in the implementation of the Component that owns this Realization."
	relation ComponentRealization_realizingClassifier [
		from ComponentRealization
		to Classifier
		functional
	] < Dependency_client

	@rdfs:label "Actor"
	@rdfs:comment "An Actor specifies a role played by a user or any other system that interacts with the subject."
	concept Actor < BehavioredClassifier

	@rdfs:label "Duration"
	@rdfs:comment "A Duration is a ValueSpecification that specifies the temporal distance between two time instants."
	concept Duration < ValueSpecification

	@rdfs:label "expr"
	@rdfs:comment "A ValueSpecification that evaluates to the value of the Duration."
	relation Duration_expr [
		from Duration
		to ValueSpecification
		functional
	] < Element_ownedElement

	@rdfs:label "observation"
	@rdfs:comment "Refers to the Observations that are involved in the computation of the Duration value"
	relation Duration_observation [
		from Duration
		to Observation
	]

	@rdfs:label "DurationConstraint"
	@rdfs:comment "A DurationConstraint is a Constraint that refers to a DurationInterval."
	concept DurationConstraint < IntervalConstraint [
		restricts DurationConstraint_firstEvent to max 2
	]

	@rdfs:label "firstEvent"
	@rdfs:comment "The value of firstEvent[i] is related to constrainedElement[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters constrainedElement[i]. If firstEvent[i] is false, then the corresponding observation event is the last time instant the execution is within constrainedElement[i]."
	scalar property DurationConstraint_firstEvent [
		domain DurationConstraint
		range types:Boolean
	]

	@rdfs:label "IntervalConstraint"
	@rdfs:comment "An IntervalConstraint is a Constraint that is specified by an Interval."
	concept IntervalConstraint < Constraint

	@rdfs:label "Interval"
	@rdfs:comment "An Interval defines the range between two ValueSpecifications."
	concept Interval < ValueSpecification [
		restricts Interval_max to exactly 1
		restricts Interval_min to exactly 1
	]

	@rdfs:label "max"
	@rdfs:comment "Refers to the ValueSpecification denoting the maximum value of the range."
	relation Interval_max [
		from Interval
		to ValueSpecification
		functional
	]

	@rdfs:label "min"
	@rdfs:comment "Refers to the ValueSpecification denoting the minimum value of the range."
	relation Interval_min [
		from Interval
		to ValueSpecification
		functional
	]

	@rdfs:label "DurationInterval"
	@rdfs:comment "A DurationInterval defines the range between two Durations."
	concept DurationInterval < Interval

	@rdfs:label "DurationObservation"
	@rdfs:comment "A DurationObservation is a reference to a duration during an execution. It points out the NamedElement(s) in the model to observe and whether the observations are when this NamedElement is entered or when it is exited."
	concept DurationObservation < Observation [
		restricts DurationObservation_event to min 1
		restricts DurationObservation_event to max 2
		restricts DurationObservation_firstEvent to max 2
	]

	@rdfs:label "event"
	@rdfs:comment "The DurationObservation is determined as the duration between the entering or exiting of a single event Element during execution, or the entering/exiting of one event Element and the entering/exiting of a second."
	relation DurationObservation_event [
		from DurationObservation
		to NamedElement
	]

	@rdfs:label "firstEvent"
	@rdfs:comment "The value of firstEvent[i] is related to event[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters event[i]. If firstEvent[i] is false, then the corresponding observation event is the time instant the execution exits event[i]."
	scalar property DurationObservation_firstEvent [
		domain DurationObservation
		range types:Boolean
	]

	@rdfs:label "LiteralBoolean"
	@rdfs:comment "A LiteralBoolean is a specification of a Boolean value."
	concept LiteralBoolean < LiteralSpecification [
		restricts LiteralBoolean_value to exactly 1
	]

	@rdfs:label "value"
	@rdfs:comment "The specified Boolean value."
	scalar property LiteralBoolean_value [
		domain LiteralBoolean
		range types:Boolean
		functional
	]

	@rdfs:label "LiteralSpecification"
	@rdfs:comment "A LiteralSpecification identifies a literal constant being modeled."
	aspect LiteralSpecification < ValueSpecification

	@rdfs:label "LiteralInteger"
	@rdfs:comment "A LiteralInteger is a specification of an Integer value."
	concept LiteralInteger < LiteralSpecification [
		restricts LiteralInteger_value to exactly 1
	]

	@rdfs:label "value"
	@rdfs:comment "The specified Integer value."
	scalar property LiteralInteger_value [
		domain LiteralInteger
		range types:Integer
		functional
	]

	@rdfs:label "LiteralNull"
	@rdfs:comment "A LiteralNull specifies the lack of a value."
	concept LiteralNull < LiteralSpecification

	@rdfs:label "LiteralReal"
	@rdfs:comment "A LiteralReal is a specification of a Real value."
	concept LiteralReal < LiteralSpecification [
		restricts LiteralReal_value to exactly 1
	]

	@rdfs:label "value"
	@rdfs:comment "The specified Real value."
	scalar property LiteralReal_value [
		domain LiteralReal
		range types:Real
		functional
	]

	@rdfs:label "LiteralString"
	@rdfs:comment "A LiteralString is a specification of a String value."
	concept LiteralString < LiteralSpecification

	@rdfs:label "value"
	@rdfs:comment "The specified String value."
	scalar property LiteralString_value [
		domain LiteralString
		range types:String
		functional
	]

	@rdfs:label "LiteralUnlimitedNatural"
	@rdfs:comment "A LiteralUnlimitedNatural is a specification of an UnlimitedNatural number."
	concept LiteralUnlimitedNatural < LiteralSpecification [
		restricts LiteralUnlimitedNatural_value to exactly 1
	]

	@rdfs:label "value"
	@rdfs:comment "The specified UnlimitedNatural value."
	scalar property LiteralUnlimitedNatural_value [
		domain LiteralUnlimitedNatural
		range types:UnlimitedNatural
		functional
	]

	@rdfs:label "TimeConstraint"
	@rdfs:comment "A TimeConstraint is a Constraint that refers to a TimeInterval."
	concept TimeConstraint < IntervalConstraint

	@rdfs:label "firstEvent"
	@rdfs:comment "The value of firstEvent is related to the constrainedElement. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters the constrainedElement. If firstEvent is false, then the corresponding observation event is the last time instant the execution is within the constrainedElement."
	scalar property TimeConstraint_firstEvent [
		domain TimeConstraint
		range types:Boolean
		functional
	]

	@rdfs:label "TimeInterval"
	@rdfs:comment "A TimeInterval defines the range between two TimeExpressions."
	concept TimeInterval < Interval

	@rdfs:label "TimeObservation"
	@rdfs:comment "A TimeObservation is a reference to a time instant during an execution. It points out the NamedElement in the model to observe and whether the observation is when this NamedElement is entered or when it is exited."
	concept TimeObservation < Observation [
		restricts TimeObservation_event to exactly 1
		restricts TimeObservation_firstEvent to exactly 1
	]

	@rdfs:label "event"
	@rdfs:comment "The TimeObservation is determined by the entering or exiting of the event Element during execution."
	relation TimeObservation_event [
		from TimeObservation
		to NamedElement
		functional
	]

	@rdfs:label "firstEvent"
	@rdfs:comment "The value of firstEvent is related to the event. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters the event Element. If firstEvent is false, then the corresponding observation event is the time instant the execution exits the event Element."
	scalar property TimeObservation_firstEvent [
		domain TimeObservation
		range types:Boolean
		functional
	]

	ref relation Operation_class < RedefinableElement_redefinitionContext

	ref relation InterfaceRealization_implementingClassifier < Dependency_client

	ref relation Generalization_specific < DirectedRelationship_source

	ref relation Substitution_substitutingClassifier < Dependency_client

	ref relation ElementImport_importingNamespace < DirectedRelationship_source

	ref relation PackageImport_importingNamespace < DirectedRelationship_source

	ref relation PackageMerge_receivingPackage < DirectedRelationship_source

	ref relation ProfileApplication_applyingPackage < DirectedRelationship_source

	ref relation TemplateBinding_boundElement < DirectedRelationship_source

	ref relation Property_owningAssociation < RedefinableElement_redefinitionContext

	ref relation Property_datatype < RedefinableElement_redefinitionContext

	ref relation Property_interface < RedefinableElement_redefinitionContext

	ref relation Deployment_location < Dependency_client

	ref relation Operation_datatype < RedefinableElement_redefinitionContext

	ref relation Operation_interface < RedefinableElement_redefinitionContext

	ref relation ProtocolConformance_specificMachine < DirectedRelationship_source

	ref relation Extend_extension < DirectedRelationship_source

	ref relation Include_includingCase < DirectedRelationship_source

	ref relation ComponentRealization_abstraction < Dependency_supplier
}